/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  owner: string;
  timelock_config: TimeLockConfig[];
  token: string;
}
export interface TimeLockConfig {
  duration: number;
  early_unlock_penalty_bps: number;
}
export type ExecuteMsg = {
  update_owner: {
    owner: string;
  };
} | {
  update_config: {
    config: UpdateConfigMsg;
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  claim: {
    duration: number;
    locked_at: number;
  };
} | {
  claim_all: {};
} | {
  unstake: {
    duration: number;
    locked_at: number;
  };
} | {
  restake: {
    from_duration: number;
    locked_at: number;
    to_duration: number;
  };
};
export type Uint128 = string;
export type Binary = string;
export interface UpdateConfigMsg {
  reward_contract?: string | null;
  timelock_config?: TimeLockConfig[] | null;
  token?: string | null;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  config: {};
} | {
  owner: {};
} | {
  total_staking: {};
} | {
  staking: {
    user: string;
  };
} | {
  reward: {
    user: string;
  };
} | {
  calculate_penalty: {
    amount: Uint128;
    duration: number;
    locked_at: number;
  };
};
export type Addr = string;
export interface Config {
  reward_contract: Addr;
  timelock_config: TimeLockConfig[];
  token: Addr;
}
export interface UserRewardResponse {
  flexible: FlexibleReward;
  timelock: TimelockReward[];
}
export interface FlexibleReward {
  eclip: Uint128;
  eclipastro: Uint128;
}
export interface TimelockReward {
  duration: number;
  eclip: Uint128;
  eclipastro: Uint128;
  locked_at: number;
}
export type ArrayOfUserStaking = UserStaking[];
export interface UserStaking {
  duration: number;
  staking: UserStakingByDuration[];
}
export interface UserStakingByDuration {
  amount: Uint128;
  locked_at: number;
}