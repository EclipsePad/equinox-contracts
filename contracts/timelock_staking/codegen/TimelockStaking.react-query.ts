/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, TimeLockConfig, ExecuteMsg, Uint128, Binary, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Addr, Config, UserRewardResponse, FlexibleReward, TimelockReward, ArrayOfUserStaking, UserStaking, UserStakingByDuration } from "./TimelockStaking.types";
import { TimelockStakingQueryClient, TimelockStakingClient } from "./TimelockStaking.client";
export interface TimelockStakingReactQuery<TResponse, TData = TResponse> {
  client: TimelockStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface TimelockStakingCalculatePenaltyQuery<TData> extends TimelockStakingReactQuery<Uint128, TData> {
  args: {
    amount: Uint128;
    duration: number;
    lockedAt: number;
  };
}
export function useTimelockStakingCalculatePenaltyQuery<TData = Uint128>({
  client,
  args,
  options
}: TimelockStakingCalculatePenaltyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["timelockStakingCalculatePenalty", client?.contractAddress, JSON.stringify(args)], () => client ? client.calculatePenalty({
    amount: args.amount,
    duration: args.duration,
    lockedAt: args.lockedAt
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingRewardQuery<TData> extends TimelockStakingReactQuery<UserRewardResponse, TData> {
  args: {
    user: string;
  };
}
export function useTimelockStakingRewardQuery<TData = UserRewardResponse>({
  client,
  args,
  options
}: TimelockStakingRewardQuery<TData>) {
  return useQuery<UserRewardResponse, Error, TData>(["timelockStakingReward", client?.contractAddress, JSON.stringify(args)], () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingStakingQuery<TData> extends TimelockStakingReactQuery<ArrayOfUserStaking, TData> {
  args: {
    user: string;
  };
}
export function useTimelockStakingStakingQuery<TData = ArrayOfUserStaking>({
  client,
  args,
  options
}: TimelockStakingStakingQuery<TData>) {
  return useQuery<ArrayOfUserStaking, Error, TData>(["timelockStakingStaking", client?.contractAddress, JSON.stringify(args)], () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingTotalStakingQuery<TData> extends TimelockStakingReactQuery<Uint128, TData> {}
export function useTimelockStakingTotalStakingQuery<TData = Uint128>({
  client,
  options
}: TimelockStakingTotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["timelockStakingTotalStaking", client?.contractAddress], () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingOwnerQuery<TData> extends TimelockStakingReactQuery<Addr, TData> {}
export function useTimelockStakingOwnerQuery<TData = Addr>({
  client,
  options
}: TimelockStakingOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(["timelockStakingOwner", client?.contractAddress], () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingConfigQuery<TData> extends TimelockStakingReactQuery<Config, TData> {}
export function useTimelockStakingConfigQuery<TData = Config>({
  client,
  options
}: TimelockStakingConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["timelockStakingConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TimelockStakingRestakeMutation {
  client: TimelockStakingClient;
  msg: {
    fromDuration: number;
    lockedAt: number;
    toDuration: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingRestakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingRestakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingRestakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.restake(msg, fee, memo, funds), options);
}
export interface TimelockStakingUnstakeMutation {
  client: TimelockStakingClient;
  msg: {
    duration: number;
    lockedAt: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface TimelockStakingClaimAllMutation {
  client: TimelockStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingClaimAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingClaimAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingClaimAllMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimAll(fee, memo, funds), options);
}
export interface TimelockStakingClaimMutation {
  client: TimelockStakingClient;
  msg: {
    duration: number;
    lockedAt: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}
export interface TimelockStakingReceiveMutation {
  client: TimelockStakingClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface TimelockStakingUpdateConfigMutation {
  client: TimelockStakingClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface TimelockStakingUpdateOwnerMutation {
  client: TimelockStakingClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTimelockStakingUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TimelockStakingUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TimelockStakingUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}