/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export interface InstantiateMsg {
  owner: Addr;
  rewards: RewardConfig;
  timelock_config?: TimeLockConfig[] | null;
  token: Addr;
  token_converter: Addr;
  treasury: Addr;
}
export interface RewardConfig {
  beclip: RewardDetail;
  eclip: RewardDetail;
}
export interface RewardDetail {
  daily_reward: Uint128;
  info: AssetInfo;
}
export interface TimeLockConfig {
  duration: number;
  early_unlock_penalty_bps: number;
  reward_multiplier: number;
}
export type ExecuteMsg = {
  update_owner: {
    owner: string;
  };
} | {
  update_config: {
    config: UpdateConfigMsg;
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  claim: {
    duration: number;
    locked_at?: number | null;
  };
} | {
  claim_all: {
    with_flexible: boolean;
  };
} | {
  callback: CallbackMsg;
} | {
  stake: {
    duration: number;
    recipient?: string | null;
  };
} | {
  unstake: {
    amount?: Uint128 | null;
    duration: number;
    locked_at?: number | null;
    recipient?: string | null;
  };
} | {
  restake: {
    amount?: Uint128 | null;
    from_duration: number;
    locked_at?: number | null;
    recipient?: string | null;
    to_duration: number;
  };
} | {
  allow_users: {
    users: string[];
  };
} | {
  block_users: {
    users: string[];
  };
};
export type Binary = string;
export type CallbackMsg = {
  convert: {
    duration: number;
    prev_eclipastro_balance: Uint128;
    recipient: string;
    sender: string;
  };
};
export interface UpdateConfigMsg {
  rewards?: RewardConfig | null;
  timelock_config?: TimeLockConfig[] | null;
  token?: string | null;
  token_converter?: Addr | null;
  treasury?: Addr | null;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  config: {};
} | {
  owner: {};
} | {
  total_staking: {};
} | {
  total_staking_by_duration: {};
} | {
  staking: {
    user: string;
  };
} | {
  reward: {
    user: string;
  };
} | {
  calculate_penalty: {
    amount: Uint128;
    duration: number;
    locked_at: number;
  };
} | {
  is_allowed: {
    user: string;
  };
} | {
  eclipastro_rewards: {};
};
export interface Config {
  rewards: RewardConfig;
  timelock_config: TimeLockConfig[];
  token: Addr;
  token_converter: Addr;
  treasury: Addr;
}
export type ArrayOfTupleOfUint64AndUint128 = [number, Uint128][];
export type Boolean = boolean;
export type ArrayOfUserRewardByDuration = UserRewardByDuration[];
export interface UserRewardByDuration {
  duration: number;
  rewards: UserRewardByLockedAt[];
}
export interface UserRewardByLockedAt {
  locked_at: number;
  rewards: UserReward;
}
export interface UserReward {
  beclip: Uint128;
  eclip: Uint128;
  eclipastro: Uint128;
}
export type ArrayOfUserStaking = UserStaking[];
export interface UserStaking {
  duration: number;
  staking: UserStakingByDuration[];
}
export interface UserStakingByDuration {
  amount: Uint128;
  locked_at?: number | null;
}
export type ArrayOfStakingWithDuration = StakingWithDuration[];
export interface StakingWithDuration {
  amount: Uint128;
  duration: number;
}