/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { Addr, Uint128, AssetInfo, InstantiateMsg, RewardConfig, RewardDetail, TimeLockConfig, ExecuteMsg, Binary, CallbackMsg, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Config, ArrayOfTupleOfUint64AndUint128, Boolean, ArrayOfUserRewardByDuration, UserRewardByDuration, UserRewardByLockedAt, UserReward, ArrayOfUserStaking, UserStaking, UserStakingByDuration, ArrayOfStakingWithDuration, StakingWithDuration } from "./.types";
import { QueryClient } from "./.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<QueryClient, QueryClientParams>({
  key: "queryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new QueryClient(client, contractAddress);
  }
});
export const configSelector = selectorFamily<Config, QueryClientParams & {
  params: Parameters<QueryClient["config"]>;
}>({
  key: "config",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.config(...params);
  }
});
export const ownerSelector = selectorFamily<Addr, QueryClientParams & {
  params: Parameters<QueryClient["owner"]>;
}>({
  key: "owner",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.owner(...params);
  }
});
export const totalStakingSelector = selectorFamily<Uint128, QueryClientParams & {
  params: Parameters<QueryClient["totalStaking"]>;
}>({
  key: "totalStaking",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalStaking(...params);
  }
});
export const totalStakingByDurationSelector = selectorFamily<ArrayOfStakingWithDuration, QueryClientParams & {
  params: Parameters<QueryClient["totalStakingByDuration"]>;
}>({
  key: "totalStakingByDuration",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.totalStakingByDuration(...params);
  }
});
export const stakingSelector = selectorFamily<ArrayOfUserStaking, QueryClientParams & {
  params: Parameters<QueryClient["staking"]>;
}>({
  key: "staking",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.staking(...params);
  }
});
export const rewardSelector = selectorFamily<ArrayOfUserRewardByDuration, QueryClientParams & {
  params: Parameters<QueryClient["reward"]>;
}>({
  key: "reward",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.reward(...params);
  }
});
export const calculatePenaltySelector = selectorFamily<Uint128, QueryClientParams & {
  params: Parameters<QueryClient["calculatePenalty"]>;
}>({
  key: "calculatePenalty",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.calculatePenalty(...params);
  }
});
export const isAllowedSelector = selectorFamily<Boolean, QueryClientParams & {
  params: Parameters<QueryClient["isAllowed"]>;
}>({
  key: "isAllowed",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.isAllowed(...params);
  }
});
export const eclipastroRewardsSelector = selectorFamily<ArrayOfTupleOfUint64AndUint128, QueryClientParams & {
  params: Parameters<QueryClient["eclipastroRewards"]>;
}>({
  key: "eclipastroRewards",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.eclipastroRewards(...params);
  }
});