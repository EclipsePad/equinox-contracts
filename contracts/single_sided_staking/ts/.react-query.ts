/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, Uint128, AssetInfo, InstantiateMsg, RewardConfig, RewardDetail, TimeLockConfig, ExecuteMsg, Binary, CallbackMsg, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Config, ArrayOfTupleOfUint64AndUint128, Boolean, ArrayOfUserRewardByDuration, UserRewardByDuration, UserRewardByLockedAt, UserReward, ArrayOfUserStaking, UserStaking, UserStakingByDuration, ArrayOfStakingWithDuration, StakingWithDuration } from "./.types";
import { QueryClient, Client } from "./.client";
export const QueryKeys = {
  contract: ([{
    contract: ""
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...QueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  totalStaking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "total_staking",
    args
  }] as const),
  totalStakingByDuration: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "total_staking_by_duration",
    args
  }] as const),
  staking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "staking",
    args
  }] as const),
  reward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "reward",
    args
  }] as const),
  calculatePenalty: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "calculate_penalty",
    args
  }] as const),
  isAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "is_allowed",
    args
  }] as const),
  eclipastroRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...QueryKeys.address(contractAddress)[0],
    method: "eclipastro_rewards",
    args
  }] as const)
};
export const Queries = {
  config: <TData = Config,>({
    client,
    options
  }: ConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: QueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: OwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: QueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStaking: <TData = Uint128,>({
    client,
    options
  }: TotalStakingQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: QueryKeys.totalStaking(client?.contractAddress),
    queryFn: () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStakingByDuration: <TData = ArrayOfStakingWithDuration,>({
    client,
    options
  }: TotalStakingByDurationQuery<TData>): UseQueryOptions<ArrayOfStakingWithDuration, Error, TData> => ({
    queryKey: QueryKeys.totalStakingByDuration(client?.contractAddress),
    queryFn: () => client ? client.totalStakingByDuration() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  staking: <TData = ArrayOfUserStaking,>({
    client,
    args,
    options
  }: StakingQuery<TData>): UseQueryOptions<ArrayOfUserStaking, Error, TData> => ({
    queryKey: QueryKeys.staking(client?.contractAddress, args),
    queryFn: () => client ? client.staking({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  reward: <TData = ArrayOfUserRewardByDuration,>({
    client,
    args,
    options
  }: RewardQuery<TData>): UseQueryOptions<ArrayOfUserRewardByDuration, Error, TData> => ({
    queryKey: QueryKeys.reward(client?.contractAddress, args),
    queryFn: () => client ? client.reward({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  calculatePenalty: <TData = Uint128,>({
    client,
    args,
    options
  }: CalculatePenaltyQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: QueryKeys.calculatePenalty(client?.contractAddress, args),
    queryFn: () => client ? client.calculatePenalty({
      amount: args.amount,
      duration: args.duration,
      lockedAt: args.lockedAt
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isAllowed: <TData = Boolean,>({
    client,
    args,
    options
  }: IsAllowedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: QueryKeys.isAllowed(client?.contractAddress, args),
    queryFn: () => client ? client.isAllowed({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eclipastroRewards: <TData = ArrayOfTupleOfUint64AndUint128,>({
    client,
    options
  }: EclipastroRewardsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndUint128, Error, TData> => ({
    queryKey: QueryKeys.eclipastroRewards(client?.contractAddress),
    queryFn: () => client ? client.eclipastroRewards() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ReactQuery<TResponse, TData = TResponse> {
  client: QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface EclipastroRewardsQuery<TData> extends ReactQuery<ArrayOfTupleOfUint64AndUint128, TData> {}
export function useEclipastroRewardsQuery<TData = ArrayOfTupleOfUint64AndUint128>({
  client,
  options
}: EclipastroRewardsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndUint128, Error, TData>(QueryKeys.eclipastroRewards(client?.contractAddress), () => client ? client.eclipastroRewards() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface IsAllowedQuery<TData> extends ReactQuery<Boolean, TData> {
  args: {
    user: string;
  };
}
export function useIsAllowedQuery<TData = Boolean>({
  client,
  args,
  options
}: IsAllowedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(QueryKeys.isAllowed(client?.contractAddress, args), () => client ? client.isAllowed({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CalculatePenaltyQuery<TData> extends ReactQuery<Uint128, TData> {
  args: {
    amount: Uint128;
    duration: number;
    lockedAt: number;
  };
}
export function useCalculatePenaltyQuery<TData = Uint128>({
  client,
  args,
  options
}: CalculatePenaltyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(QueryKeys.calculatePenalty(client?.contractAddress, args), () => client ? client.calculatePenalty({
    amount: args.amount,
    duration: args.duration,
    lockedAt: args.lockedAt
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface RewardQuery<TData> extends ReactQuery<ArrayOfUserRewardByDuration, TData> {
  args: {
    user: string;
  };
}
export function useRewardQuery<TData = ArrayOfUserRewardByDuration>({
  client,
  args,
  options
}: RewardQuery<TData>) {
  return useQuery<ArrayOfUserRewardByDuration, Error, TData>(QueryKeys.reward(client?.contractAddress, args), () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface StakingQuery<TData> extends ReactQuery<ArrayOfUserStaking, TData> {
  args: {
    user: string;
  };
}
export function useStakingQuery<TData = ArrayOfUserStaking>({
  client,
  args,
  options
}: StakingQuery<TData>) {
  return useQuery<ArrayOfUserStaking, Error, TData>(QueryKeys.staking(client?.contractAddress, args), () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TotalStakingByDurationQuery<TData> extends ReactQuery<ArrayOfStakingWithDuration, TData> {}
export function useTotalStakingByDurationQuery<TData = ArrayOfStakingWithDuration>({
  client,
  options
}: TotalStakingByDurationQuery<TData>) {
  return useQuery<ArrayOfStakingWithDuration, Error, TData>(QueryKeys.totalStakingByDuration(client?.contractAddress), () => client ? client.totalStakingByDuration() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TotalStakingQuery<TData> extends ReactQuery<Uint128, TData> {}
export function useTotalStakingQuery<TData = Uint128>({
  client,
  options
}: TotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(QueryKeys.totalStaking(client?.contractAddress), () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OwnerQuery<TData> extends ReactQuery<Addr, TData> {}
export function useOwnerQuery<TData = Addr>({
  client,
  options
}: OwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(QueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ConfigQuery<TData> extends ReactQuery<Config, TData> {}
export function useConfigQuery<TData = Config>({
  client,
  options
}: ConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(QueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BlockUsersMutation {
  client: Client;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBlockUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BlockUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BlockUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.blockUsers(msg, fee, memo, funds), options);
}
export interface AllowUsersMutation {
  client: Client;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useAllowUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AllowUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, AllowUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allowUsers(msg, fee, memo, funds), options);
}
export interface RestakeMutation {
  client: Client;
  msg: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRestakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RestakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RestakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.restake(msg, fee, memo, funds), options);
}
export interface UnstakeMutation {
  client: Client;
  msg: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, UnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, UnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface StakeMutation {
  client: Client;
  msg: {
    duration: number;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, StakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(msg, fee, memo, funds), options);
}
export interface CallbackMutation {
  client: Client;
  msg: CallbackMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCallbackMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CallbackMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CallbackMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.callback(msg, fee, memo, funds), options);
}
export interface ClaimAllMutation {
  client: Client;
  msg: {
    withFlexible: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useClaimAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ClaimAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ClaimAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimAll(msg, fee, memo, funds), options);
}
export interface ClaimMutation {
  client: Client;
  msg: {
    duration: number;
    lockedAt?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}
export interface ReceiveMutation {
  client: Client;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface UpdateConfigMutation {
  client: Client;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, UpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, UpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface UpdateOwnerMutation {
  client: Client;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, UpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, UpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}