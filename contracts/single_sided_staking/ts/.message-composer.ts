/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Uint128, AssetInfo, InstantiateMsg, RewardConfig, RewardDetail, TimeLockConfig, ExecuteMsg, Binary, CallbackMsg, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Config, ArrayOfTupleOfUint64AndUint128, Boolean, ArrayOfUserRewardByDuration, UserRewardByDuration, UserRewardByLockedAt, UserReward, ArrayOfUserStaking, UserStaking, UserStakingByDuration, ArrayOfStakingWithDuration, StakingWithDuration } from "./.types";
export interface Msg {
  contractAddress: string;
  sender: string;
  updateOwner: ({
    owner
  }: {
    owner: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    config
  }: {
    config: UpdateConfigMsg;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: ({
    duration,
    lockedAt
  }: {
    duration: number;
    lockedAt?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimAll: ({
    withFlexible
  }: {
    withFlexible: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  callback: (callbackMsg: CallbackMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stake: ({
    duration,
    recipient
  }: {
    duration: number;
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    amount,
    duration,
    lockedAt,
    recipient
  }: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  restake: ({
    amount,
    fromDuration,
    lockedAt,
    recipient,
    toDuration
  }: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  allowUsers: ({
    users
  }: {
    users: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  blockUsers: ({
    users
  }: {
    users: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MsgComposer implements Msg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateOwner = this.updateOwner.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.receive = this.receive.bind(this);
    this.claim = this.claim.bind(this);
    this.claimAll = this.claimAll.bind(this);
    this.callback = this.callback.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.restake = this.restake.bind(this);
    this.allowUsers = this.allowUsers.bind(this);
    this.blockUsers = this.blockUsers.bind(this);
  }

  updateOwner = ({
    owner
  }: {
    owner: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_owner: {
            owner
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    config
  }: {
    config: UpdateConfigMsg;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
  claim = ({
    duration,
    lockedAt
  }: {
    duration: number;
    lockedAt?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {
            duration,
            locked_at: lockedAt
          }
        })),
        funds: _funds
      })
    };
  };
  claimAll = ({
    withFlexible
  }: {
    withFlexible: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_all: {
            with_flexible: withFlexible
          }
        })),
        funds: _funds
      })
    };
  };
  callback = (callbackMsg: CallbackMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          callback: callbackMsg
        })),
        funds: _funds
      })
    };
  };
  stake = ({
    duration,
    recipient
  }: {
    duration: number;
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake: {
            duration,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    amount,
    duration,
    lockedAt,
    recipient
  }: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            amount,
            duration,
            locked_at: lockedAt,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  restake = ({
    amount,
    fromDuration,
    lockedAt,
    recipient,
    toDuration
  }: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          restake: {
            amount,
            from_duration: fromDuration,
            locked_at: lockedAt,
            recipient,
            to_duration: toDuration
          }
        })),
        funds: _funds
      })
    };
  };
  allowUsers = ({
    users
  }: {
    users: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          allow_users: {
            users
          }
        })),
        funds: _funds
      })
    };
  };
  blockUsers = ({
    users
  }: {
    users: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          block_users: {
            users
          }
        })),
        funds: _funds
      })
    };
  };
}