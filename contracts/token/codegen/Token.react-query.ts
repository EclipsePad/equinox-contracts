/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, MinterResponse, ExecuteMsg, Expiration, Timestamp, Uint64, QueryMsg, AllAccountsResponse, AllAllowancesResponse, AllowanceInfo, AllSpenderAllowancesResponse, SpenderAllowanceInfo, AllowanceResponse, BalanceResponse, DownloadLogoResponse, LogoInfo, Addr, MarketingInfoResponse, TokenInfoResponse } from "./Token.types";
import { TokenQueryClient, TokenClient } from "./Token.client";
export const tokenQueryKeys = {
  contract: ([{
    contract: "token"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...tokenQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "balance",
    args
  }] as const),
  tokenInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "token_info",
    args
  }] as const),
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "minter",
    args
  }] as const),
  allowance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "allowance",
    args
  }] as const),
  allAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "all_allowances",
    args
  }] as const),
  allSpenderAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "all_spender_allowances",
    args
  }] as const),
  allAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "all_accounts",
    args
  }] as const),
  marketingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "marketing_info",
    args
  }] as const),
  downloadLogo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenQueryKeys.address(contractAddress)[0],
    method: "download_logo",
    args
  }] as const)
};
export const tokenQueries = {
  balance: <TData = BalanceResponse,>({
    client,
    args,
    options
  }: TokenBalanceQuery<TData>): UseQueryOptions<BalanceResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.balance(client?.contractAddress, args),
    queryFn: () => client ? client.balance({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  tokenInfo: <TData = TokenInfoResponse,>({
    client,
    options
  }: TokenTokenInfoQuery<TData>): UseQueryOptions<TokenInfoResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.tokenInfo(client?.contractAddress),
    queryFn: () => client ? client.tokenInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  minter: <TData = MinterResponse,>({
    client,
    options
  }: TokenMinterQuery<TData>): UseQueryOptions<MinterResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.minter(client?.contractAddress),
    queryFn: () => client ? client.minter() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allowance: <TData = AllowanceResponse,>({
    client,
    args,
    options
  }: TokenAllowanceQuery<TData>): UseQueryOptions<AllowanceResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.allowance(client?.contractAddress, args),
    queryFn: () => client ? client.allowance({
      owner: args.owner,
      spender: args.spender
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allAllowances: <TData = AllAllowancesResponse,>({
    client,
    args,
    options
  }: TokenAllAllowancesQuery<TData>): UseQueryOptions<AllAllowancesResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.allAllowances(client?.contractAddress, args),
    queryFn: () => client ? client.allAllowances({
      limit: args.limit,
      owner: args.owner,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allSpenderAllowances: <TData = AllSpenderAllowancesResponse,>({
    client,
    args,
    options
  }: TokenAllSpenderAllowancesQuery<TData>): UseQueryOptions<AllSpenderAllowancesResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.allSpenderAllowances(client?.contractAddress, args),
    queryFn: () => client ? client.allSpenderAllowances({
      limit: args.limit,
      spender: args.spender,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allAccounts: <TData = AllAccountsResponse,>({
    client,
    args,
    options
  }: TokenAllAccountsQuery<TData>): UseQueryOptions<AllAccountsResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.allAccounts(client?.contractAddress, args),
    queryFn: () => client ? client.allAccounts({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  marketingInfo: <TData = MarketingInfoResponse,>({
    client,
    options
  }: TokenMarketingInfoQuery<TData>): UseQueryOptions<MarketingInfoResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.marketingInfo(client?.contractAddress),
    queryFn: () => client ? client.marketingInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  downloadLogo: <TData = DownloadLogoResponse,>({
    client,
    options
  }: TokenDownloadLogoQuery<TData>): UseQueryOptions<DownloadLogoResponse, Error, TData> => ({
    queryKey: tokenQueryKeys.downloadLogo(client?.contractAddress),
    queryFn: () => client ? client.downloadLogo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface TokenReactQuery<TResponse, TData = TResponse> {
  client: TokenQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface TokenDownloadLogoQuery<TData> extends TokenReactQuery<DownloadLogoResponse, TData> {}
export function useTokenDownloadLogoQuery<TData = DownloadLogoResponse>({
  client,
  options
}: TokenDownloadLogoQuery<TData>) {
  return useQuery<DownloadLogoResponse, Error, TData>(tokenQueryKeys.downloadLogo(client?.contractAddress), () => client ? client.downloadLogo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenMarketingInfoQuery<TData> extends TokenReactQuery<MarketingInfoResponse, TData> {}
export function useTokenMarketingInfoQuery<TData = MarketingInfoResponse>({
  client,
  options
}: TokenMarketingInfoQuery<TData>) {
  return useQuery<MarketingInfoResponse, Error, TData>(tokenQueryKeys.marketingInfo(client?.contractAddress), () => client ? client.marketingInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenAllAccountsQuery<TData> extends TokenReactQuery<AllAccountsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useTokenAllAccountsQuery<TData = AllAccountsResponse>({
  client,
  args,
  options
}: TokenAllAccountsQuery<TData>) {
  return useQuery<AllAccountsResponse, Error, TData>(tokenQueryKeys.allAccounts(client?.contractAddress, args), () => client ? client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenAllSpenderAllowancesQuery<TData> extends TokenReactQuery<AllSpenderAllowancesResponse, TData> {
  args: {
    limit?: number;
    spender: string;
    startAfter?: string;
  };
}
export function useTokenAllSpenderAllowancesQuery<TData = AllSpenderAllowancesResponse>({
  client,
  args,
  options
}: TokenAllSpenderAllowancesQuery<TData>) {
  return useQuery<AllSpenderAllowancesResponse, Error, TData>(tokenQueryKeys.allSpenderAllowances(client?.contractAddress, args), () => client ? client.allSpenderAllowances({
    limit: args.limit,
    spender: args.spender,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenAllAllowancesQuery<TData> extends TokenReactQuery<AllAllowancesResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useTokenAllAllowancesQuery<TData = AllAllowancesResponse>({
  client,
  args,
  options
}: TokenAllAllowancesQuery<TData>) {
  return useQuery<AllAllowancesResponse, Error, TData>(tokenQueryKeys.allAllowances(client?.contractAddress, args), () => client ? client.allAllowances({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenAllowanceQuery<TData> extends TokenReactQuery<AllowanceResponse, TData> {
  args: {
    owner: string;
    spender: string;
  };
}
export function useTokenAllowanceQuery<TData = AllowanceResponse>({
  client,
  args,
  options
}: TokenAllowanceQuery<TData>) {
  return useQuery<AllowanceResponse, Error, TData>(tokenQueryKeys.allowance(client?.contractAddress, args), () => client ? client.allowance({
    owner: args.owner,
    spender: args.spender
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenMinterQuery<TData> extends TokenReactQuery<MinterResponse, TData> {}
export function useTokenMinterQuery<TData = MinterResponse>({
  client,
  options
}: TokenMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(tokenQueryKeys.minter(client?.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenTokenInfoQuery<TData> extends TokenReactQuery<TokenInfoResponse, TData> {}
export function useTokenTokenInfoQuery<TData = TokenInfoResponse>({
  client,
  options
}: TokenTokenInfoQuery<TData>) {
  return useQuery<TokenInfoResponse, Error, TData>(tokenQueryKeys.tokenInfo(client?.contractAddress), () => client ? client.tokenInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenBalanceQuery<TData> extends TokenReactQuery<BalanceResponse, TData> {
  args: {
    address: string;
  };
}
export function useTokenBalanceQuery<TData = BalanceResponse>({
  client,
  args,
  options
}: TokenBalanceQuery<TData>) {
  return useQuery<BalanceResponse, Error, TData>(tokenQueryKeys.balance(client?.contractAddress, args), () => client ? client.balance({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenUploadLogoMutation {
  client: TokenClient;
  msg: Logo;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenUploadLogoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenUploadLogoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenUploadLogoMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.uploadLogo(msg, fee, memo, funds), options);
}
export interface TokenUpdateMarketingMutation {
  client: TokenClient;
  msg: {
    description?: string;
    marketing?: string;
    project?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenUpdateMarketingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenUpdateMarketingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenUpdateMarketingMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMarketing(msg, fee, memo, funds), options);
}
export interface TokenUpdateMinterMutation {
  client: TokenClient;
  msg: {
    newMinter?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenUpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenUpdateMinterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenUpdateMinterMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMinter(msg, fee, memo, funds), options);
}
export interface TokenMintMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface TokenBurnFromMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenBurnFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenBurnFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenBurnFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burnFrom(msg, fee, memo, funds), options);
}
export interface TokenSendFromMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    contract: string;
    msg: Binary;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenSendFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenSendFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenSendFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendFrom(msg, fee, memo, funds), options);
}
export interface TokenTransferFromMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    owner: string;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenTransferFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenTransferFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenTransferFromMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferFrom(msg, fee, memo, funds), options);
}
export interface TokenDecreaseAllowanceMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    expires?: Expiration;
    spender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenDecreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenDecreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenDecreaseAllowanceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.decreaseAllowance(msg, fee, memo, funds), options);
}
export interface TokenIncreaseAllowanceMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    expires?: Expiration;
    spender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenIncreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenIncreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenIncreaseAllowanceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increaseAllowance(msg, fee, memo, funds), options);
}
export interface TokenSendMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    contract: string;
    msg: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenSendMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenSendMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenSendMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.send(msg, fee, memo, funds), options);
}
export interface TokenBurnMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface TokenTransferMutation {
  client: TokenClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transfer(msg, fee, memo, funds), options);
}