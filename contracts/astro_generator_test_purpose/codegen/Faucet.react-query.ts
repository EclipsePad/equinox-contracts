/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, String, LastClaimedResponse } from "./Faucet.types";
import { FaucetQueryClient, FaucetClient } from "./Faucet.client";
export const faucetQueryKeys = {
  contract: ([{
    contract: "faucet"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...faucetQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  denom: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...faucetQueryKeys.address(contractAddress)[0],
    method: "denom",
    args
  }] as const),
  lastClaimed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...faucetQueryKeys.address(contractAddress)[0],
    method: "last_claimed",
    args
  }] as const)
};
export const faucetQueries = {
  denom: <TData = String,>({
    client,
    options
  }: FaucetDenomQuery<TData>): UseQueryOptions<String, Error, TData> => ({
    queryKey: faucetQueryKeys.denom(client?.contractAddress),
    queryFn: () => client ? client.denom() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  lastClaimed: <TData = LastClaimedResponse,>({
    client,
    args,
    options
  }: FaucetLastClaimedQuery<TData>): UseQueryOptions<LastClaimedResponse, Error, TData> => ({
    queryKey: faucetQueryKeys.lastClaimed(client?.contractAddress, args),
    queryFn: () => client ? client.lastClaimed({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface FaucetReactQuery<TResponse, TData = TResponse> {
  client: FaucetQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FaucetLastClaimedQuery<TData> extends FaucetReactQuery<LastClaimedResponse, TData> {
  args: {
    addr: string;
  };
}
export function useFaucetLastClaimedQuery<TData = LastClaimedResponse>({
  client,
  args,
  options
}: FaucetLastClaimedQuery<TData>) {
  return useQuery<LastClaimedResponse, Error, TData>(faucetQueryKeys.lastClaimed(client?.contractAddress, args), () => client ? client.lastClaimed({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FaucetDenomQuery<TData> extends FaucetReactQuery<String, TData> {}
export function useFaucetDenomQuery<TData = String>({
  client,
  options
}: FaucetDenomQuery<TData>) {
  return useQuery<String, Error, TData>(faucetQueryKeys.denom(client?.contractAddress), () => client ? client.denom() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FaucetClaimMutation {
  client: FaucetClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFaucetClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FaucetClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FaucetClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}