/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, Cw20ReceiveMsg, UpdateConfig, Vote, QueryMsg, Addr, Config, TupleOfUint128AndUint128 } from "./Voter.types";
export interface VoterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  owner: () => Promise<Addr>;
  votingPower: () => Promise<Uint128>;
  convertRatio: () => Promise<TupleOfUint128AndUint128>;
}
export class VoterQueryClient implements VoterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.owner = this.owner.bind(this);
    this.votingPower = this.votingPower.bind(this);
    this.convertRatio = this.convertRatio.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  owner = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {}
    });
  };
  votingPower = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_power: {}
    });
  };
  convertRatio = async (): Promise<TupleOfUint128AndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      convert_ratio: {}
    });
  };
}
export interface VoterInterface extends VoterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: UpdateConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwner: ({
    owner
  }: {
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawBribeRewards: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  placeVote: ({
    gauge,
    votes
  }: {
    gauge: number;
    votes?: Vote[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VoterClient extends VoterQueryClient implements VoterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwner = this.updateOwner.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.withdrawBribeRewards = this.withdrawBribeRewards.bind(this);
    this.placeVote = this.placeVote.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    config
  }: {
    config: UpdateConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, _funds);
  };
  updateOwner = async ({
    owner
  }: {
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_owner: {
        owner
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
  withdrawBribeRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_bribe_rewards: {}
    }, fee, memo, _funds);
  };
  placeVote = async ({
    gauge,
    votes
  }: {
    gauge: number;
    votes?: Vote[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      place_vote: {
        gauge,
        votes
      }
    }, fee, memo, _funds);
  };
}