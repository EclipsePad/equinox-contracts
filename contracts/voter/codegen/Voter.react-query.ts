/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, Cw20ReceiveMsg, UpdateConfig, Vote, QueryMsg, Addr, Config, TupleOfUint128AndUint128 } from "./Voter.types";
import { VoterQueryClient, VoterClient } from "./Voter.client";
export const voterQueryKeys = {
  contract: ([{
    contract: "voter"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...voterQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...voterQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...voterQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  votingPower: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...voterQueryKeys.address(contractAddress)[0],
    method: "voting_power",
    args
  }] as const),
  convertRatio: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...voterQueryKeys.address(contractAddress)[0],
    method: "convert_ratio",
    args
  }] as const)
};
export const voterQueries = {
  config: <TData = Config,>({
    client,
    options
  }: VoterConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: voterQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: VoterOwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: voterQueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingPower: <TData = Uint128,>({
    client,
    options
  }: VoterVotingPowerQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: voterQueryKeys.votingPower(client?.contractAddress),
    queryFn: () => client ? client.votingPower() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  convertRatio: <TData = TupleOfUint128AndUint128,>({
    client,
    options
  }: VoterConvertRatioQuery<TData>): UseQueryOptions<TupleOfUint128AndUint128, Error, TData> => ({
    queryKey: voterQueryKeys.convertRatio(client?.contractAddress),
    queryFn: () => client ? client.convertRatio() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface VoterReactQuery<TResponse, TData = TResponse> {
  client: VoterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VoterConvertRatioQuery<TData> extends VoterReactQuery<TupleOfUint128AndUint128, TData> {}
export function useVoterConvertRatioQuery<TData = TupleOfUint128AndUint128>({
  client,
  options
}: VoterConvertRatioQuery<TData>) {
  return useQuery<TupleOfUint128AndUint128, Error, TData>(voterQueryKeys.convertRatio(client?.contractAddress), () => client ? client.convertRatio() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VoterVotingPowerQuery<TData> extends VoterReactQuery<Uint128, TData> {}
export function useVoterVotingPowerQuery<TData = Uint128>({
  client,
  options
}: VoterVotingPowerQuery<TData>) {
  return useQuery<Uint128, Error, TData>(voterQueryKeys.votingPower(client?.contractAddress), () => client ? client.votingPower() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VoterOwnerQuery<TData> extends VoterReactQuery<Addr, TData> {}
export function useVoterOwnerQuery<TData = Addr>({
  client,
  options
}: VoterOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(voterQueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VoterConfigQuery<TData> extends VoterReactQuery<Config, TData> {}
export function useVoterConfigQuery<TData = Config>({
  client,
  options
}: VoterConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(voterQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VoterPlaceVoteMutation {
  client: VoterClient;
  msg: {
    gauge: number;
    votes?: Vote[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterPlaceVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterPlaceVoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterPlaceVoteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.placeVote(msg, fee, memo, funds), options);
}
export interface VoterWithdrawBribeRewardsMutation {
  client: VoterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterWithdrawBribeRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterWithdrawBribeRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterWithdrawBribeRewardsMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawBribeRewards(fee, memo, funds), options);
}
export interface VoterWithdrawMutation {
  client: VoterClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface VoterUpdateOwnerMutation {
  client: VoterClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}
export interface VoterUpdateConfigMutation {
  client: VoterClient;
  msg: {
    config: UpdateConfig;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface VoterReceiveMutation {
  client: VoterClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVoterReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VoterReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VoterReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}