/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Addr, Config, FlexibleReward } from "./FlexibleStaking.types";
import { FlexibleStakingQueryClient, FlexibleStakingClient } from "./FlexibleStaking.client";
export interface FlexibleStakingReactQuery<TResponse, TData = TResponse> {
  client: FlexibleStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FlexibleStakingRewardQuery<TData> extends FlexibleStakingReactQuery<FlexibleReward, TData> {
  args: {
    user: string;
  };
}
export function useFlexibleStakingRewardQuery<TData = FlexibleReward>({
  client,
  args,
  options
}: FlexibleStakingRewardQuery<TData>) {
  return useQuery<FlexibleReward, Error, TData>(["flexibleStakingReward", client?.contractAddress, JSON.stringify(args)], () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FlexibleStakingStakingQuery<TData> extends FlexibleStakingReactQuery<Uint128, TData> {
  args: {
    user: string;
  };
}
export function useFlexibleStakingStakingQuery<TData = Uint128>({
  client,
  args,
  options
}: FlexibleStakingStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["flexibleStakingStaking", client?.contractAddress, JSON.stringify(args)], () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FlexibleStakingTotalStakingQuery<TData> extends FlexibleStakingReactQuery<Uint128, TData> {}
export function useFlexibleStakingTotalStakingQuery<TData = Uint128>({
  client,
  options
}: FlexibleStakingTotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["flexibleStakingTotalStaking", client?.contractAddress], () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FlexibleStakingOwnerQuery<TData> extends FlexibleStakingReactQuery<Addr, TData> {}
export function useFlexibleStakingOwnerQuery<TData = Addr>({
  client,
  options
}: FlexibleStakingOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(["flexibleStakingOwner", client?.contractAddress], () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FlexibleStakingConfigQuery<TData> extends FlexibleStakingReactQuery<Config, TData> {}
export function useFlexibleStakingConfigQuery<TData = Config>({
  client,
  options
}: FlexibleStakingConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["flexibleStakingConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FlexibleStakingUnstakeMutation {
  client: FlexibleStakingClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFlexibleStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FlexibleStakingUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FlexibleStakingUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface FlexibleStakingClaimMutation {
  client: FlexibleStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFlexibleStakingClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FlexibleStakingClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FlexibleStakingClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface FlexibleStakingReceiveMutation {
  client: FlexibleStakingClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFlexibleStakingReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FlexibleStakingReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FlexibleStakingReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface FlexibleStakingUpdateConfigMutation {
  client: FlexibleStakingClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFlexibleStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FlexibleStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FlexibleStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface FlexibleStakingUpdateOwnerMutation {
  client: FlexibleStakingClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFlexibleStakingUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FlexibleStakingUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FlexibleStakingUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}