/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  astro_staking: string;
  astro_token: string;
  converter: string;
  deposit_window: number;
  eclip: string;
  eclipastro_token: string;
  init_timestamp: number;
  liquidity_pool: string;
  lock_configs: LockConfig[];
  owner?: string | null;
  withdrawal_window: number;
  xastro_token: string;
}
export interface LockConfig {
  duration: number;
  multiplier: number;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  update_config: {
    new_config: UpdateConfigMsg;
  };
} | {
  stake_to_single_vault: {};
} | {
  stake_to_lp_vault: {};
} | {
  enable_claims: {};
} | {
  extend_lock: {
    amount?: Uint128 | null;
    from: number;
    stake_type: StakeType;
    to: number;
  };
} | {
  single_lockup_withdraw: {
    amount?: Uint128 | null;
    duration: number;
  };
} | {
  lp_lockup_withdraw: {
    amount?: Uint128 | null;
    duration: number;
  };
} | {
  increase_eclip_incentives: {
    stake_type: StakeType;
  };
} | {
  restake_single_staking: {
    amount?: Uint128 | null;
    from: number;
    to: number;
  };
} | {
  claim_rewards_and_optionally_unlock: {
    amount?: Uint128 | null;
    duration: number;
    stake_type: StakeType;
  };
} | {
  claim_asset_reward: {
    duration: number;
    recipient?: string | null;
    stake_type: StakeType;
  };
} | {
  callback: CallbackMsg;
} | {
  propose_new_owner: {
    expires_in: number;
    owner: string;
  };
} | {
  drop_ownership_proposal: {};
} | {
  claim_ownership: {};
};
export type Uint128 = string;
export type Binary = string;
export type StakeType = "single_staking" | "lp_staking";
export type CallbackMsg = {
  stake_to_single_vault: {
    prev_eclipastro_balance: Uint128;
    xastro_amount_to_convert: Uint128;
  };
} | {
  deposit_into_pool: {
    prev_eclipastro_balance: Uint128;
    xastro_amount: Uint128;
  };
} | {
  distribute_lp_staking_asset_rewards: {
    duration: number;
    prev_astro_balance: Uint128;
    prev_eclip_balance: Uint128;
    recipient: Addr;
    user_address: Addr;
  };
} | {
  distribute_single_staking_asset_rewards: {
    duration: number;
    prev_eclip_balance: Uint128;
    prev_eclipastro_balance: Uint128;
    recipient: Addr;
    user_address: Addr;
  };
} | {
  stake_lp_token: {
    prev_lp_token_balance: Uint128;
  };
} | {
  claim_single_staking_asset_rewards: {
    duration: number;
    recipient: Addr;
    user_address: Addr;
  };
} | {
  claim_lp_staking_asset_rewards: {
    duration: number;
    recipient: Addr;
    user_address: Addr;
  };
} | {
  claim_single_staking_rewards: {
    duration: number;
    user_address: Addr;
  };
} | {
  unlock_single_lockup: {
    amount: Uint128;
    duration: number;
    user_address: Addr;
  };
} | {
  unlock_lp_lockup: {
    amount: Uint128;
    duration: number;
    user_address: Addr;
  };
};
export type Addr = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface UpdateConfigMsg {
  flexible_staking?: string | null;
  lp_staking?: string | null;
  reward_distributor?: string | null;
  timelock_staking?: string | null;
}
export type QueryMsg = {
  config: {};
} | {
  owner: {};
} | {
  single_lockup_info: {};
} | {
  lp_lockup_info: {};
} | {
  single_lockup_state: {};
} | {
  lp_lockup_state: {};
} | {
  user_single_lockup_info: {
    user: Addr;
  };
} | {
  user_lp_lockup_info: {
    user: Addr;
  };
};
export interface Config {
  astro_staking: Addr;
  astro_token: Addr;
  converter: Addr;
  deposit_window: number;
  eclip: string;
  eclipastro_token: Addr;
  flexible_staking?: Addr | null;
  init_timestamp: number;
  liquidity_pool: Addr;
  lock_configs: LockConfig[];
  lockdrop_incentives: Uint128;
  lp_staking?: Addr | null;
  lp_token: Addr;
  reward_distributor?: Addr | null;
  timelock_staking?: Addr | null;
  withdrawal_window: number;
  xastro_token: Addr;
}
export type ArrayOfLockupInfoResponse = LockupInfoResponse[];
export interface LockupInfoResponse {
  duration: number;
  total_staked: Uint128;
  total_withdrawed: Uint128;
  xastro_amount_in_lockups: Uint128;
}
export type ArrayOfLpLockupStateResponse = LpLockupStateResponse[];
export interface LpLockupStateResponse {
  are_claims_allowed: boolean;
  countdown_start_at: number;
  is_staked: boolean;
  total_eclip_incentives: Uint128;
  total_lp_lockdrop: Uint128;
}
export type ArrayOfSingleLockupStateResponse = SingleLockupStateResponse[];
export interface SingleLockupStateResponse {
  are_claims_allowed: boolean;
  countdown_start_at: number;
  is_staked: boolean;
  total_eclip_incentives: Uint128;
  total_eclipastro_lockup: Uint128;
}
export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export type ArrayOfUserLpLockupInfoResponse = UserLpLockupInfoResponse[];
export interface UserLpLockupInfoResponse {
  claimed_eclip_incentives: Uint128;
  countdown_start_at: number;
  duration: number;
  lp_token_staked: Uint128;
  lp_token_withdrawed: Uint128;
  staking_rewards: Asset[];
  total_eclip_incentives: Uint128;
  withdrawal_flag: boolean;
  xastro_amount_in_lockups: Uint128;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
}
export type ArrayOfUserSingleLockupInfoResponse = UserSingleLockupInfoResponse[];
export interface UserSingleLockupInfoResponse {
  claimed_eclip_incentives: Uint128;
  countdown_start_at: number;
  duration: number;
  eclipastro_staked: Uint128;
  eclipastro_withdrawed: Uint128;
  staking_rewards: Asset[];
  total_eclip_incentives: Uint128;
  withdrawal_flag: boolean;
  xastro_amount_in_lockups: Uint128;
}