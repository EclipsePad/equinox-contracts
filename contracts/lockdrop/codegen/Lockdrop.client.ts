/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, LockConfig, ExecuteMsg, Uint128, Binary, StakeType, CallbackMsg, Addr, Cw20ReceiveMsg, UpdateConfigMsg, RewardDistributionConfig, QueryMsg, Config, ArrayOfLockupInfoResponse, LockupInfoResponse, LpLockupStateResponse, SingleLockupStateResponse, BalanceResponse, AssetInfo, ArrayOfUserLpLockupInfoResponse, UserLpLockupInfoResponse, Asset, ArrayOfUserSingleLockupInfoResponse, UserSingleLockupInfoResponse } from "./Lockdrop.types";
export interface LockdropReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  owner: () => Promise<Addr>;
  singleLockupInfo: () => Promise<ArrayOfLockupInfoResponse>;
  lpLockupInfo: () => Promise<ArrayOfLockupInfoResponse>;
  singleLockupState: () => Promise<SingleLockupStateResponse>;
  lpLockupState: () => Promise<LpLockupStateResponse>;
  userSingleLockupInfo: ({
    user
  }: {
    user: Addr;
  }) => Promise<ArrayOfUserSingleLockupInfoResponse>;
  userLpLockupInfo: ({
    user
  }: {
    user: Addr;
  }) => Promise<ArrayOfUserLpLockupInfoResponse>;
  totalEclipIncentives: () => Promise<BalanceResponse>;
}
export class LockdropQueryClient implements LockdropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.owner = this.owner.bind(this);
    this.singleLockupInfo = this.singleLockupInfo.bind(this);
    this.lpLockupInfo = this.lpLockupInfo.bind(this);
    this.singleLockupState = this.singleLockupState.bind(this);
    this.lpLockupState = this.lpLockupState.bind(this);
    this.userSingleLockupInfo = this.userSingleLockupInfo.bind(this);
    this.userLpLockupInfo = this.userLpLockupInfo.bind(this);
    this.totalEclipIncentives = this.totalEclipIncentives.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  owner = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {}
    });
  };
  singleLockupInfo = async (): Promise<ArrayOfLockupInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      single_lockup_info: {}
    });
  };
  lpLockupInfo = async (): Promise<ArrayOfLockupInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lp_lockup_info: {}
    });
  };
  singleLockupState = async (): Promise<SingleLockupStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      single_lockup_state: {}
    });
  };
  lpLockupState = async (): Promise<LpLockupStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lp_lockup_state: {}
    });
  };
  userSingleLockupInfo = async ({
    user
  }: {
    user: Addr;
  }): Promise<ArrayOfUserSingleLockupInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_single_lockup_info: {
        user
      }
    });
  };
  userLpLockupInfo = async ({
    user
  }: {
    user: Addr;
  }): Promise<ArrayOfUserLpLockupInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_lp_lockup_info: {
        user
      }
    });
  };
  totalEclipIncentives = async (): Promise<BalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_eclip_incentives: {}
    });
  };
}
export interface LockdropInterface extends LockdropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    newConfig
  }: {
    newConfig: UpdateConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRewardDistributionConfig: ({
    newConfig
  }: {
    newConfig: RewardDistributionConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stakeToVaults: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  extendLock: ({
    from,
    stakeType,
    to
  }: {
    from: number;
    stakeType: StakeType;
    to: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  singleLockupWithdraw: ({
    amount,
    duration
  }: {
    amount?: Uint128;
    duration: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  lpLockupWithdraw: ({
    amount,
    duration
  }: {
    amount?: Uint128;
    duration: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  increaseEclipIncentives: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  relockSingleStaking: ({
    from,
    to
  }: {
    from: number;
    to: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewardsAndOptionallyUnlock: ({
    amount,
    duration,
    stakeType
  }: {
    amount?: Uint128;
    duration: number;
    stakeType: StakeType;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  callback: (callbackMsg: CallbackMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LockdropClient extends LockdropQueryClient implements LockdropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateRewardDistributionConfig = this.updateRewardDistributionConfig.bind(this);
    this.stakeToVaults = this.stakeToVaults.bind(this);
    this.extendLock = this.extendLock.bind(this);
    this.singleLockupWithdraw = this.singleLockupWithdraw.bind(this);
    this.lpLockupWithdraw = this.lpLockupWithdraw.bind(this);
    this.increaseEclipIncentives = this.increaseEclipIncentives.bind(this);
    this.relockSingleStaking = this.relockSingleStaking.bind(this);
    this.claimRewardsAndOptionallyUnlock = this.claimRewardsAndOptionallyUnlock.bind(this);
    this.callback = this.callback.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    newConfig
  }: {
    newConfig: UpdateConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_config: newConfig
      }
    }, fee, memo, _funds);
  };
  updateRewardDistributionConfig = async ({
    newConfig
  }: {
    newConfig: RewardDistributionConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_reward_distribution_config: {
        new_config: newConfig
      }
    }, fee, memo, _funds);
  };
  stakeToVaults = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake_to_vaults: {}
    }, fee, memo, _funds);
  };
  extendLock = async ({
    from,
    stakeType,
    to
  }: {
    from: number;
    stakeType: StakeType;
    to: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      extend_lock: {
        from,
        stake_type: stakeType,
        to
      }
    }, fee, memo, _funds);
  };
  singleLockupWithdraw = async ({
    amount,
    duration
  }: {
    amount?: Uint128;
    duration: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      single_lockup_withdraw: {
        amount,
        duration
      }
    }, fee, memo, _funds);
  };
  lpLockupWithdraw = async ({
    amount,
    duration
  }: {
    amount?: Uint128;
    duration: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lp_lockup_withdraw: {
        amount,
        duration
      }
    }, fee, memo, _funds);
  };
  increaseEclipIncentives = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increase_eclip_incentives: {}
    }, fee, memo, _funds);
  };
  relockSingleStaking = async ({
    from,
    to
  }: {
    from: number;
    to: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      relock_single_staking: {
        from,
        to
      }
    }, fee, memo, _funds);
  };
  claimRewardsAndOptionallyUnlock = async ({
    amount,
    duration,
    stakeType
  }: {
    amount?: Uint128;
    duration: number;
    stakeType: StakeType;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards_and_optionally_unlock: {
        amount,
        duration,
        stake_type: stakeType
      }
    }, fee, memo, _funds);
  };
  callback = async (callbackMsg: CallbackMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      callback: callbackMsg
    }, fee, memo, _funds);
  };
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, fee, memo, _funds);
  };
  dropOwnershipProposal = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, fee, memo, _funds);
  };
  claimOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee, memo, _funds);
  };
}