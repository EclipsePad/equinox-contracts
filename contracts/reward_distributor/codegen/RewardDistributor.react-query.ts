/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, LockingRewardConfig, ExecuteMsg, UpdateConfigMsg, QueryMsg, Addr, Config, UserRewardResponse, FlexibleReward, TimelockReward } from "./RewardDistributor.types";
import { RewardDistributorQueryClient, RewardDistributorClient } from "./RewardDistributor.client";
export interface RewardDistributorReactQuery<TResponse, TData = TResponse> {
  client: RewardDistributorQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface RewardDistributorRewardQuery<TData> extends RewardDistributorReactQuery<UserRewardResponse, TData> {
  args: {
    user: string;
  };
}
export function useRewardDistributorRewardQuery<TData = UserRewardResponse>({
  client,
  args,
  options
}: RewardDistributorRewardQuery<TData>) {
  return useQuery<UserRewardResponse, Error, TData>(["rewardDistributorReward", client?.contractAddress, JSON.stringify(args)], () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface RewardDistributorOwnerQuery<TData> extends RewardDistributorReactQuery<Addr, TData> {}
export function useRewardDistributorOwnerQuery<TData = Addr>({
  client,
  options
}: RewardDistributorOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(["rewardDistributorOwner", client?.contractAddress], () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface RewardDistributorConfigQuery<TData> extends RewardDistributorReactQuery<Config, TData> {}
export function useRewardDistributorConfigQuery<TData = Config>({
  client,
  options
}: RewardDistributorConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["rewardDistributorConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface RewardDistributorRestakeMutation {
  client: RewardDistributorClient;
  msg: {
    from: number;
    lockedAt: number;
    to: number;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorRestakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorRestakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorRestakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.restake(msg, fee, memo, funds), options);
}
export interface RewardDistributorTimelockUnstakeMutation {
  client: RewardDistributorClient;
  msg: {
    duration: number;
    lockedAt: number;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorTimelockUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorTimelockUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorTimelockUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.timelockUnstake(msg, fee, memo, funds), options);
}
export interface RewardDistributorFlexibleUnstakeMutation {
  client: RewardDistributorClient;
  msg: {
    amount: Uint128;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorFlexibleUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorFlexibleUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorFlexibleUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.flexibleUnstake(msg, fee, memo, funds), options);
}
export interface RewardDistributorTimelockStakeClaimAllMutation {
  client: RewardDistributorClient;
  msg: {
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorTimelockStakeClaimAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorTimelockStakeClaimAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorTimelockStakeClaimAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.timelockStakeClaimAll(msg, fee, memo, funds), options);
}
export interface RewardDistributorTimelockStakeClaimMutation {
  client: RewardDistributorClient;
  msg: {
    duration: number;
    lockedAt: number;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorTimelockStakeClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorTimelockStakeClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorTimelockStakeClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.timelockStakeClaim(msg, fee, memo, funds), options);
}
export interface RewardDistributorFlexibleStakeClaimMutation {
  client: RewardDistributorClient;
  msg: {
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorFlexibleStakeClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorFlexibleStakeClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorFlexibleStakeClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.flexibleStakeClaim(msg, fee, memo, funds), options);
}
export interface RewardDistributorTimelockStakeMutation {
  client: RewardDistributorClient;
  msg: {
    amount: Uint128;
    duration: number;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorTimelockStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorTimelockStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorTimelockStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.timelockStake(msg, fee, memo, funds), options);
}
export interface RewardDistributorFlexibleStakeMutation {
  client: RewardDistributorClient;
  msg: {
    amount: Uint128;
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorFlexibleStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorFlexibleStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorFlexibleStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.flexibleStake(msg, fee, memo, funds), options);
}
export interface RewardDistributorUpdateConfigMutation {
  client: RewardDistributorClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface RewardDistributorUpdateOwnerMutation {
  client: RewardDistributorClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useRewardDistributorUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, RewardDistributorUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, RewardDistributorUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}