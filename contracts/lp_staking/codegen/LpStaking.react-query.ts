/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, UpdateConfigMsg, Cw20ReceiveMsg, QueryMsg, Addr, Config, Boolean, FlexibleReward } from "./LpStaking.types";
import { LpStakingQueryClient, LpStakingClient } from "./LpStaking.client";
export const lpStakingQueryKeys = {
  contract: ([{
    contract: "lpStaking"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...lpStakingQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  totalStaking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "total_staking",
    args
  }] as const),
  staking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "staking",
    args
  }] as const),
  reward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "reward",
    args
  }] as const),
  isAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "is_allowed",
    args
  }] as const)
};
export const lpStakingQueries = {
  config: <TData = Config,>({
    client,
    options
  }: LpStakingConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: lpStakingQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: LpStakingOwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: lpStakingQueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStaking: <TData = Uint128,>({
    client,
    options
  }: LpStakingTotalStakingQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: lpStakingQueryKeys.totalStaking(client?.contractAddress),
    queryFn: () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  staking: <TData = Uint128,>({
    client,
    args,
    options
  }: LpStakingStakingQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: lpStakingQueryKeys.staking(client?.contractAddress, args),
    queryFn: () => client ? client.staking({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  reward: <TData = FlexibleReward,>({
    client,
    args,
    options
  }: LpStakingRewardQuery<TData>): UseQueryOptions<FlexibleReward, Error, TData> => ({
    queryKey: lpStakingQueryKeys.reward(client?.contractAddress, args),
    queryFn: () => client ? client.reward({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isAllowed: <TData = Boolean,>({
    client,
    args,
    options
  }: LpStakingIsAllowedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: lpStakingQueryKeys.isAllowed(client?.contractAddress, args),
    queryFn: () => client ? client.isAllowed({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface LpStakingReactQuery<TResponse, TData = TResponse> {
  client: LpStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface LpStakingIsAllowedQuery<TData> extends LpStakingReactQuery<Boolean, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingIsAllowedQuery<TData = Boolean>({
  client,
  args,
  options
}: LpStakingIsAllowedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(lpStakingQueryKeys.isAllowed(client?.contractAddress, args), () => client ? client.isAllowed({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingRewardQuery<TData> extends LpStakingReactQuery<FlexibleReward, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingRewardQuery<TData = FlexibleReward>({
  client,
  args,
  options
}: LpStakingRewardQuery<TData>) {
  return useQuery<FlexibleReward, Error, TData>(lpStakingQueryKeys.reward(client?.contractAddress, args), () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingStakingQuery<TData> extends LpStakingReactQuery<Uint128, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingStakingQuery<TData = Uint128>({
  client,
  args,
  options
}: LpStakingStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(lpStakingQueryKeys.staking(client?.contractAddress, args), () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingTotalStakingQuery<TData> extends LpStakingReactQuery<Uint128, TData> {}
export function useLpStakingTotalStakingQuery<TData = Uint128>({
  client,
  options
}: LpStakingTotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(lpStakingQueryKeys.totalStaking(client?.contractAddress), () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingOwnerQuery<TData> extends LpStakingReactQuery<Addr, TData> {}
export function useLpStakingOwnerQuery<TData = Addr>({
  client,
  options
}: LpStakingOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(lpStakingQueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingConfigQuery<TData> extends LpStakingReactQuery<Config, TData> {}
export function useLpStakingConfigQuery<TData = Config>({
  client,
  options
}: LpStakingConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(lpStakingQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingBlockUsersMutation {
  client: LpStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingBlockUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingBlockUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingBlockUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.blockUsers(msg, fee, memo, funds), options);
}
export interface LpStakingAllowUsersMutation {
  client: LpStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingAllowUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingAllowUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingAllowUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allowUsers(msg, fee, memo, funds), options);
}
export interface LpStakingRelockMutation {
  client: LpStakingClient;
  msg: {
    amount?: Uint128;
    duration: number;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingRelockMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingRelockMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingRelockMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.relock(msg, fee, memo, funds), options);
}
export interface LpStakingUnstakeMutation {
  client: LpStakingClient;
  msg: {
    amount: Uint128;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface LpStakingClaimMutation {
  client: LpStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface LpStakingReceiveMutation {
  client: LpStakingClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface LpStakingUpdateConfigMutation {
  client: LpStakingClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface LpStakingUpdateOwnerMutation {
  client: LpStakingClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}