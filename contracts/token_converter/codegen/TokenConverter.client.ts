/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Logo, EmbeddedLogo, Binary, InstantiateMsg, InstantiateMarketingInfo, ExecuteMsg, Uint128, Cw20ReceiveMsg, UpdateConfig, RewardConfig, QueryMsg, Addr, Config, RewardResponse, Reward } from "./TokenConverter.types";
export interface TokenConverterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  rewardConfig: () => Promise<RewardConfig>;
  rewards: () => Promise<RewardResponse>;
  owner: () => Promise<Addr>;
  withdrawableBalance: () => Promise<Uint128>;
}
export class TokenConverterQueryClient implements TokenConverterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.rewardConfig = this.rewardConfig.bind(this);
    this.rewards = this.rewards.bind(this);
    this.owner = this.owner.bind(this);
    this.withdrawableBalance = this.withdrawableBalance.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  rewardConfig = async (): Promise<RewardConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_config: {}
    });
  };
  rewards = async (): Promise<RewardResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      rewards: {}
    });
  };
  owner = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {}
    });
  };
  withdrawableBalance = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdrawable_balance: {}
    });
  };
}
export interface TokenConverterInterface extends TokenConverterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: UpdateConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRewardConfig: ({
    config
  }: {
    config: RewardConfig;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwner: ({
    owner
  }: {
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimTreasuryReward: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawAvailableBalance: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TokenConverterClient extends TokenConverterQueryClient implements TokenConverterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateRewardConfig = this.updateRewardConfig.bind(this);
    this.updateOwner = this.updateOwner.bind(this);
    this.claim = this.claim.bind(this);
    this.claimTreasuryReward = this.claimTreasuryReward.bind(this);
    this.withdrawAvailableBalance = this.withdrawAvailableBalance.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    config
  }: {
    config: UpdateConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, _funds);
  };
  updateRewardConfig = async ({
    config
  }: {
    config: RewardConfig;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_reward_config: {
        config
      }
    }, fee, memo, _funds);
  };
  updateOwner = async ({
    owner
  }: {
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_owner: {
        owner
      }
    }, fee, memo, _funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, _funds);
  };
  claimTreasuryReward = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_treasury_reward: {
        amount
      }
    }, fee, memo, _funds);
  };
  withdrawAvailableBalance = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_available_balance: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
}