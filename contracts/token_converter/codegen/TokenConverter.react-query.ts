/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Logo, EmbeddedLogo, Binary, InstantiateMsg, InstantiateMarketingInfo, ExecuteMsg, Uint128, Cw20ReceiveMsg, UpdateConfig, RewardConfig, QueryMsg, Addr, Config, RewardResponse, Reward } from "./TokenConverter.types";
import { TokenConverterQueryClient, TokenConverterClient } from "./TokenConverter.client";
export const tokenConverterQueryKeys = {
  contract: ([{
    contract: "tokenConverter"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...tokenConverterQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenConverterQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  rewardConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenConverterQueryKeys.address(contractAddress)[0],
    method: "reward_config",
    args
  }] as const),
  rewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenConverterQueryKeys.address(contractAddress)[0],
    method: "rewards",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenConverterQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  withdrawableBalance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tokenConverterQueryKeys.address(contractAddress)[0],
    method: "withdrawable_balance",
    args
  }] as const)
};
export const tokenConverterQueries = {
  config: <TData = Config,>({
    client,
    options
  }: TokenConverterConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: tokenConverterQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardConfig: <TData = RewardConfig,>({
    client,
    options
  }: TokenConverterRewardConfigQuery<TData>): UseQueryOptions<RewardConfig, Error, TData> => ({
    queryKey: tokenConverterQueryKeys.rewardConfig(client?.contractAddress),
    queryFn: () => client ? client.rewardConfig() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewards: <TData = RewardResponse,>({
    client,
    options
  }: TokenConverterRewardsQuery<TData>): UseQueryOptions<RewardResponse, Error, TData> => ({
    queryKey: tokenConverterQueryKeys.rewards(client?.contractAddress),
    queryFn: () => client ? client.rewards() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: TokenConverterOwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: tokenConverterQueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  withdrawableBalance: <TData = Uint128,>({
    client,
    options
  }: TokenConverterWithdrawableBalanceQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: tokenConverterQueryKeys.withdrawableBalance(client?.contractAddress),
    queryFn: () => client ? client.withdrawableBalance() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface TokenConverterReactQuery<TResponse, TData = TResponse> {
  client: TokenConverterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface TokenConverterWithdrawableBalanceQuery<TData> extends TokenConverterReactQuery<Uint128, TData> {}
export function useTokenConverterWithdrawableBalanceQuery<TData = Uint128>({
  client,
  options
}: TokenConverterWithdrawableBalanceQuery<TData>) {
  return useQuery<Uint128, Error, TData>(tokenConverterQueryKeys.withdrawableBalance(client?.contractAddress), () => client ? client.withdrawableBalance() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenConverterOwnerQuery<TData> extends TokenConverterReactQuery<Addr, TData> {}
export function useTokenConverterOwnerQuery<TData = Addr>({
  client,
  options
}: TokenConverterOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(tokenConverterQueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenConverterRewardsQuery<TData> extends TokenConverterReactQuery<RewardResponse, TData> {}
export function useTokenConverterRewardsQuery<TData = RewardResponse>({
  client,
  options
}: TokenConverterRewardsQuery<TData>) {
  return useQuery<RewardResponse, Error, TData>(tokenConverterQueryKeys.rewards(client?.contractAddress), () => client ? client.rewards() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenConverterRewardConfigQuery<TData> extends TokenConverterReactQuery<RewardConfig, TData> {}
export function useTokenConverterRewardConfigQuery<TData = RewardConfig>({
  client,
  options
}: TokenConverterRewardConfigQuery<TData>) {
  return useQuery<RewardConfig, Error, TData>(tokenConverterQueryKeys.rewardConfig(client?.contractAddress), () => client ? client.rewardConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenConverterConfigQuery<TData> extends TokenConverterReactQuery<Config, TData> {}
export function useTokenConverterConfigQuery<TData = Config>({
  client,
  options
}: TokenConverterConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(tokenConverterQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TokenConverterWithdrawAvailableBalanceMutation {
  client: TokenConverterClient;
  msg: {
    amount: Uint128;
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterWithdrawAvailableBalanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterWithdrawAvailableBalanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterWithdrawAvailableBalanceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawAvailableBalance(msg, fee, memo, funds), options);
}
export interface TokenConverterClaimTreasuryRewardMutation {
  client: TokenConverterClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterClaimTreasuryRewardMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterClaimTreasuryRewardMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterClaimTreasuryRewardMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimTreasuryReward(msg, fee, memo, funds), options);
}
export interface TokenConverterClaimMutation {
  client: TokenConverterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface TokenConverterUpdateOwnerMutation {
  client: TokenConverterClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterUpdateOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterUpdateOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterUpdateOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwner(msg, fee, memo, funds), options);
}
export interface TokenConverterUpdateRewardConfigMutation {
  client: TokenConverterClient;
  msg: {
    config: RewardConfig;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterUpdateRewardConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterUpdateRewardConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterUpdateRewardConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateRewardConfig(msg, fee, memo, funds), options);
}
export interface TokenConverterUpdateConfigMutation {
  client: TokenConverterClient;
  msg: {
    config: UpdateConfig;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface TokenConverterReceiveMutation {
  client: TokenConverterClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTokenConverterReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TokenConverterReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TokenConverterReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}