/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, TimeLockConfig, ExecuteMsg, AssetInfo, Addr, CallbackMsg, Uint128, UpdateConfigMsg, QueryMsg, MigrateMsg, ArrayOfString, UserReward, Config, ArrayOfTupleOfUint64AndUint128, Boolean, ArrayOfTupleOfUint64Anduint64AndUserReward, ArrayOfTupleOfTupleOfUint64Anduint64AndReward, Reward, ArrayOfUserStaking, UserStaking, UserStakingByDuration, ArrayOfStakingWithDuration, StakingWithDuration, ArrayOfUnbondedItem, UnbondedItem } from "./SingleSidedStaking.types";
export interface SingleSidedStakingReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  owner: () => Promise<Addr>;
  totalStaking: () => Promise<Uint128>;
  totalStakingByDuration: ({
    timestamp
  }: {
    timestamp?: number;
  }) => Promise<ArrayOfStakingWithDuration>;
  staking: ({
    user
  }: {
    user: string;
  }) => Promise<ArrayOfUserStaking>;
  unbonded: ({
    user
  }: {
    user: string;
  }) => Promise<ArrayOfUnbondedItem>;
  reward: ({
    duration,
    lockedAt,
    user
  }: {
    duration: number;
    lockedAt: number;
    user: string;
  }) => Promise<UserReward>;
  calculateReward: ({
    amount,
    duration,
    from,
    lockedAt,
    to
  }: {
    amount: Uint128;
    duration: number;
    from: number;
    lockedAt?: number;
    to?: number;
  }) => Promise<UserReward>;
  calculatePenalty: ({
    amount,
    duration,
    lockedAt
  }: {
    amount: Uint128;
    duration: number;
    lockedAt: number;
  }) => Promise<Uint128>;
  isAllowed: ({
    user
  }: {
    user: string;
  }) => Promise<Boolean>;
  eclipastroRewards: () => Promise<ArrayOfTupleOfUint64AndUint128>;
  blacklist: () => Promise<ArrayOfString>;
  rewardSchedule: ({
    from
  }: {
    from?: number;
  }) => Promise<ArrayOfTupleOfTupleOfUint64AndUint64AndReward>;
  rewardList: ({
    user
  }: {
    user: string;
  }) => Promise<ArrayOfTupleOfUint64AndUint64AndUserReward>;
  calculatePenaltyAmount: ({
    amount,
    duration,
    lockedAt
  }: {
    amount: Uint128;
    duration: number;
    lockedAt?: number;
  }) => Promise<Uint128>;
}
export class SingleSidedStakingQueryClient implements SingleSidedStakingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.owner = this.owner.bind(this);
    this.totalStaking = this.totalStaking.bind(this);
    this.totalStakingByDuration = this.totalStakingByDuration.bind(this);
    this.staking = this.staking.bind(this);
    this.unbonded = this.unbonded.bind(this);
    this.reward = this.reward.bind(this);
    this.calculateReward = this.calculateReward.bind(this);
    this.calculatePenalty = this.calculatePenalty.bind(this);
    this.isAllowed = this.isAllowed.bind(this);
    this.eclipastroRewards = this.eclipastroRewards.bind(this);
    this.blacklist = this.blacklist.bind(this);
    this.rewardSchedule = this.rewardSchedule.bind(this);
    this.rewardList = this.rewardList.bind(this);
    this.calculatePenaltyAmount = this.calculatePenaltyAmount.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  owner = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner: {}
    });
  };
  totalStaking = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_staking: {}
    });
  };
  totalStakingByDuration = async ({
    timestamp
  }: {
    timestamp?: number;
  }): Promise<ArrayOfStakingWithDuration> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_staking_by_duration: {
        timestamp
      }
    });
  };
  staking = async ({
    user
  }: {
    user: string;
  }): Promise<ArrayOfUserStaking> => {
    return this.client.queryContractSmart(this.contractAddress, {
      staking: {
        user
      }
    });
  };
  unbonded = async ({
    user
  }: {
    user: string;
  }): Promise<ArrayOfUnbondedItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unbonded: {
        user
      }
    });
  };
  reward = async ({
    duration,
    lockedAt,
    user
  }: {
    duration: number;
    lockedAt: number;
    user: string;
  }): Promise<UserReward> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward: {
        duration,
        locked_at: lockedAt,
        user
      }
    });
  };
  calculateReward = async ({
    amount,
    duration,
    from,
    lockedAt,
    to
  }: {
    amount: Uint128;
    duration: number;
    from: number;
    lockedAt?: number;
    to?: number;
  }): Promise<UserReward> => {
    return this.client.queryContractSmart(this.contractAddress, {
      calculate_reward: {
        amount,
        duration,
        from,
        locked_at: lockedAt,
        to
      }
    });
  };
  calculatePenalty = async ({
    amount,
    duration,
    lockedAt
  }: {
    amount: Uint128;
    duration: number;
    lockedAt: number;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      calculate_penalty: {
        amount,
        duration,
        locked_at: lockedAt
      }
    });
  };
  isAllowed = async ({
    user
  }: {
    user: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_allowed: {
        user
      }
    });
  };
  eclipastroRewards = async (): Promise<ArrayOfTupleOfUint64AndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      eclipastro_rewards: {}
    });
  };
  blacklist = async (): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      blacklist: {}
    });
  };
  rewardSchedule = async ({
    from
  }: {
    from?: number;
  }): Promise<ArrayOfTupleOfTupleOfUint64AndUint64AndReward> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_schedule: {
        from
      }
    });
  };
  rewardList = async ({
    user
  }: {
    user: string;
  }): Promise<ArrayOfTupleOfUint64AndUint64AndUserReward> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_list: {
        user
      }
    });
  };
  calculatePenaltyAmount = async ({
    amount,
    duration,
    lockedAt
  }: {
    amount: Uint128;
    duration: number;
    lockedAt?: number;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      calculate_penalty_amount: {
        amount,
        duration,
        locked_at: lockedAt
      }
    });
  };
}
export interface SingleSidedStakingInterface extends SingleSidedStakingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: UpdateConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    assets,
    duration,
    lockedAt
  }: {
    assets?: AssetInfo[];
    duration: number;
    lockedAt?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimAll: ({
    assets,
    withFlexible
  }: {
    assets?: AssetInfo[];
    withFlexible: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  callback: (callbackMsg: CallbackMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stake: ({
    duration,
    recipient
  }: {
    duration: number;
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    amount,
    duration,
    lockedAt,
    recipient
  }: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unbond: ({
    duration,
    lockedAt,
    period
  }: {
    duration: number;
    lockedAt: number;
    period: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    recipient
  }: {
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  restake: ({
    amount,
    fromDuration,
    lockedAt,
    recipient,
    toDuration
  }: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  allowUsers: ({
    users
  }: {
    users: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  blockUsers: ({
    users
  }: {
    users: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addRewards: ({
    beclip,
    duration,
    eclip,
    from
  }: {
    beclip: Uint128;
    duration?: number;
    eclip: Uint128;
    from?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimBlacklistRewards: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SingleSidedStakingClient extends SingleSidedStakingQueryClient implements SingleSidedStakingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.claim = this.claim.bind(this);
    this.claimAll = this.claimAll.bind(this);
    this.callback = this.callback.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.unbond = this.unbond.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.restake = this.restake.bind(this);
    this.allowUsers = this.allowUsers.bind(this);
    this.blockUsers = this.blockUsers.bind(this);
    this.addRewards = this.addRewards.bind(this);
    this.claimBlacklistRewards = this.claimBlacklistRewards.bind(this);
  }
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, fee, memo, _funds);
  };
  dropOwnershipProposal = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, fee, memo, _funds);
  };
  claimOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    config
  }: {
    config: UpdateConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, _funds);
  };
  claim = async ({
    assets,
    duration,
    lockedAt
  }: {
    assets?: AssetInfo[];
    duration: number;
    lockedAt?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        assets,
        duration,
        locked_at: lockedAt
      }
    }, fee, memo, _funds);
  };
  claimAll = async ({
    assets,
    withFlexible
  }: {
    assets?: AssetInfo[];
    withFlexible: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_all: {
        assets,
        with_flexible: withFlexible
      }
    }, fee, memo, _funds);
  };
  callback = async (callbackMsg: CallbackMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      callback: callbackMsg
    }, fee, memo, _funds);
  };
  stake = async ({
    duration,
    recipient
  }: {
    duration: number;
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {
        duration,
        recipient
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    amount,
    duration,
    lockedAt,
    recipient
  }: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        amount,
        duration,
        locked_at: lockedAt,
        recipient
      }
    }, fee, memo, _funds);
  };
  unbond = async ({
    duration,
    lockedAt,
    period
  }: {
    duration: number;
    lockedAt: number;
    period: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unbond: {
        duration,
        locked_at: lockedAt,
        period
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    recipient
  }: {
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        recipient
      }
    }, fee, memo, _funds);
  };
  restake = async ({
    amount,
    fromDuration,
    lockedAt,
    recipient,
    toDuration
  }: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      restake: {
        amount,
        from_duration: fromDuration,
        locked_at: lockedAt,
        recipient,
        to_duration: toDuration
      }
    }, fee, memo, _funds);
  };
  allowUsers = async ({
    users
  }: {
    users: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      allow_users: {
        users
      }
    }, fee, memo, _funds);
  };
  blockUsers = async ({
    users
  }: {
    users: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      block_users: {
        users
      }
    }, fee, memo, _funds);
  };
  addRewards = async ({
    beclip,
    duration,
    eclip,
    from
  }: {
    beclip: Uint128;
    duration?: number;
    eclip: Uint128;
    from?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_rewards: {
        beclip,
        duration,
        eclip,
        from
      }
    }, fee, memo, _funds);
  };
  claimBlacklistRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_blacklist_rewards: {}
    }, fee, memo, _funds);
  };
}