/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export type Addr = string;
export interface InstantiateMsg {
  astro: string;
  astro_staking: string;
  astroport_incentives: string;
  beclip: string;
  blacklist?: string[] | null;
  eclip: string;
  eclip_staking: string;
  funding_dao: string;
  lockdrop?: string | null;
  lp_contract: string;
  lp_token: AssetInfo;
  owner?: string | null;
  treasury: string;
  xastro: string;
}
export type ExecuteMsg = {
  propose_new_owner: {
    expires_in: number;
    owner: string;
  };
} | {
  drop_ownership_proposal: {};
} | {
  claim_ownership: {};
} | {
  update_config: {
    config: UpdateConfigMsg;
  };
} | {
  update_reward_distribution: {
    distribution: RewardDistribution;
  };
} | {
  claim: {
    assets?: AssetInfo[] | null;
  };
} | {
  callback: CallbackMsg;
} | {
  unstake: {
    amount: Uint128;
    recipient?: string | null;
  };
} | {
  stake: {
    recipient?: string | null;
  };
} | {
  unbond: {
    amount?: Uint128 | null;
    period: number;
  };
} | {
  withdraw: {
    recipient?: string | null;
  };
} | {
  add_rewards: {
    beclip: Uint128;
    duration?: number | null;
    eclip: Uint128;
    from?: number | null;
  };
} | {
  claim_blacklist_rewards: {};
} | {
  allow_users: {
    users: string[];
  };
} | {
  block_users: {
    users: string[];
  };
} | {
  remove_from_blacklist: {
    user: string;
  };
};
export type CallbackMsg = {
  distribute_eclipse_rewards: {
    assets: Asset[];
  };
};
export type Uint128 = string;
export interface UpdateConfigMsg {
  astroport_incentives?: string | null;
  beclip?: string | null;
  eclip?: string | null;
  funding_dao?: string | null;
  lockdrop?: string | null;
  lp_contract?: string | null;
  lp_token?: AssetInfo | null;
  treasury?: string | null;
}
export interface RewardDistribution {
  funding_dao: number;
  treasury: number;
  users: number;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
}
export type QueryMsg = "blacklist_rewards" | {
  config: {};
} | {
  reward_distribution: {};
} | {
  owner: {};
} | {
  total_staking: {};
} | {
  staking: {
    user: string;
  };
} | {
  unbonded: {
    user: string;
  };
} | {
  reward: {
    user: string;
  };
} | {
  reward_weights: {};
} | {
  user_reward_weights: {
    user: string;
  };
} | {
  blacklist: {};
} | {
  is_allowed: {
    user: string;
  };
} | {
  reward_schedule: {
    from?: number | null;
  };
};
export interface MigrateMsg {
  version: string;
}
export type ArrayOfString = string[];
export type ArrayOfRewardAmount = RewardAmount[];
export interface RewardAmount {
  amount: Uint128;
  info: AssetInfo;
}
export interface Config {
  astro: string;
  astro_staking: Addr;
  astroport_incentives: Addr;
  beclip: Addr;
  eclip: string;
  eclip_staking: Addr;
  funding_dao: Addr;
  lockdrop: Addr;
  lp_contract: Addr;
  lp_token: AssetInfo;
  treasury: Addr;
  xastro: string;
}
export type Boolean = boolean;
export interface Reward {
  beclip: Uint128;
  eclip: Uint128;
}
export type ArrayOfTupleOfTupleOfUint64Anduint64AndReward = [[number, number], Reward][];
export type Decimal256 = string;
export type ArrayOfRewardWeight = RewardWeight[];
export interface RewardWeight {
  info: AssetInfo;
  reward_weight: Decimal256;
}
export interface UserStaking {
  reward_weights: RewardWeight[];
  staked: Uint128;
}
export type ArrayOfUnbondedItem = UnbondedItem[];
export interface UnbondedItem {
  amount: Uint128;
  fee: Uint128;
  release_date: number;
}