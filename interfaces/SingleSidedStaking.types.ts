/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  beclip: string;
  blacklist?: string[] | null;
  eclip: string;
  eclip_staking: string;
  init_early_unlock_penalty?: Decimal | null;
  lockdrop?: string | null;
  owner: string;
  timelock_config?: TimeLockConfig[] | null;
  token: string;
  treasury: string;
  voter: string;
}
export interface TimeLockConfig {
  duration: number;
  reward_multiplier: number;
}
export type ExecuteMsg = {
  propose_new_owner: {
    expires_in: number;
    owner: string;
  };
} | {
  drop_ownership_proposal: {};
} | {
  claim_ownership: {};
} | {
  update_config: {
    config: UpdateConfigMsg;
  };
} | {
  claim: {
    assets?: AssetInfo[] | null;
    duration: number;
    locked_at?: number | null;
  };
} | {
  claim_all: {
    assets?: AssetInfo[] | null;
    with_flexible: boolean;
  };
} | {
  callback: CallbackMsg;
} | {
  stake: {
    duration: number;
    recipient?: string | null;
  };
} | {
  unstake: {
    amount?: Uint128 | null;
    duration: number;
    locked_at?: number | null;
    recipient?: string | null;
  };
} | {
  unbond: {
    duration: number;
    locked_at: number;
    period: number;
  };
} | {
  withdraw: {
    recipient?: string | null;
  };
} | {
  restake: {
    amount?: Uint128 | null;
    from_duration: number;
    locked_at?: number | null;
    recipient?: string | null;
    to_duration: number;
  };
} | {
  allow_users: {
    users: string[];
  };
} | {
  block_users: {
    users: string[];
  };
} | {
  add_rewards: {
    beclip: Uint128;
    duration?: number | null;
    eclip: Uint128;
    from?: number | null;
  };
} | {
  claim_blacklist_rewards: {};
};
export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export type Addr = string;
export type CallbackMsg = {
  convert: {
    duration: number;
    prev_eclipastro_balance: Uint128;
    recipient: string;
    sender: string;
  };
};
export type Uint128 = string;
export interface UpdateConfigMsg {
  beclip?: string | null;
  eclip?: string | null;
  eclip_staking?: string | null;
  init_early_unlock_penalty?: Decimal | null;
  lockdrop?: string | null;
  timelock_config?: TimeLockConfig[] | null;
  treasury?: string | null;
  voter?: string | null;
}
export type QueryMsg = "blacklist_rewards" | {
  config: {};
} | {
  owner: {};
} | {
  total_staking: {};
} | {
  total_staking_by_duration: {
    timestamp?: number | null;
  };
} | {
  staking: {
    user: string;
  };
} | {
  unbonded: {
    user: string;
  };
} | {
  reward: {
    duration: number;
    locked_at: number;
    user: string;
  };
} | {
  calculate_reward: {
    amount: Uint128;
    duration: number;
    from: number;
    locked_at?: number | null;
    to?: number | null;
  };
} | {
  calculate_penalty: {
    amount: Uint128;
    duration: number;
    locked_at: number;
  };
} | {
  is_allowed: {
    user: string;
  };
} | {
  eclipastro_rewards: {};
} | {
  blacklist: {};
} | {
  reward_schedule: {
    from?: number | null;
  };
} | {
  reward_list: {
    user: string;
  };
} | {
  calculate_penalty_amount: {
    amount: Uint128;
    duration: number;
    locked_at?: number | null;
  };
};
export interface MigrateMsg {
  version: string;
}
export type ArrayOfString = string[];
export interface UserReward {
  beclip: Uint128;
  eclip: Uint128;
  eclipastro: Uint128;
}
export interface Config {
  beclip: Addr;
  eclip: string;
  eclip_staking: Addr;
  init_early_unlock_penalty: Decimal;
  lockdrop: Addr;
  timelock_config: TimeLockConfig[];
  token: string;
  treasury: Addr;
  voter: Addr;
}
export type ArrayOfTupleOfUint64AndUint128 = [number, Uint128][];
export type Boolean = boolean;
export type ArrayOfTupleOfUint64Anduint64AndUserReward = [number, number, UserReward][];
export type ArrayOfTupleOfTupleOfUint64Anduint64AndReward = [[number, number], Reward][];
export interface Reward {
  beclip: Uint128;
  eclip: Uint128;
}
export type ArrayOfUserStaking = UserStaking[];
export interface UserStaking {
  duration: number;
  staking: UserStakingByDuration[];
}
export interface UserStakingByDuration {
  amount: Uint128;
  locked_at: number;
}
export type ArrayOfStakingWithDuration = StakingWithDuration[];
export interface StakingWithDuration {
  duration: number;
  staked: Uint128;
  valid_staked: Uint128;
}
export type ArrayOfUnbondedItem = UnbondedItem[];
export interface UnbondedItem {
  amount: Uint128;
  fee: Uint128;
  release_date: number;
}