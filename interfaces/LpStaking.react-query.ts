/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetInfo, Addr, InstantiateMsg, ExecuteMsg, CallbackMsg, Uint128, UpdateConfigMsg, RewardDistribution, Asset, QueryMsg, MigrateMsg, ArrayOfString, ArrayOfRewardAmount, RewardAmount, Config, Boolean, Reward, ArrayOfTupleOfTupleOfUint64Anduint64AndReward, Decimal256, ArrayOfRewardWeight, RewardWeight, UserStaking, ArrayOfUnbondedItem, UnbondedItem } from "./LpStaking.types";
import { LpStakingQueryClient, LpStakingClient } from "./LpStaking.client";
export const lpStakingQueryKeys = {
  contract: ([{
    contract: "lpStaking"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...lpStakingQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  rewardDistribution: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "reward_distribution",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  totalStaking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "total_staking",
    args
  }] as const),
  staking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "staking",
    args
  }] as const),
  unbonded: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "unbonded",
    args
  }] as const),
  reward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "reward",
    args
  }] as const),
  rewardWeights: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "reward_weights",
    args
  }] as const),
  userRewardWeights: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "user_reward_weights",
    args
  }] as const),
  blacklist: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "blacklist",
    args
  }] as const),
  isAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "is_allowed",
    args
  }] as const),
  rewardSchedule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...lpStakingQueryKeys.address(contractAddress)[0],
    method: "reward_schedule",
    args
  }] as const)
};
export const lpStakingQueries = {
  config: <TData = Config,>({
    client,
    options
  }: LpStakingConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: lpStakingQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardDistribution: <TData = Reward,>({
    client,
    options
  }: LpStakingRewardDistributionQuery<TData>): UseQueryOptions<Reward, Error, TData> => ({
    queryKey: lpStakingQueryKeys.rewardDistribution(client?.contractAddress),
    queryFn: () => client ? client.rewardDistribution() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: LpStakingOwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: lpStakingQueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStaking: <TData = Uint128,>({
    client,
    options
  }: LpStakingTotalStakingQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: lpStakingQueryKeys.totalStaking(client?.contractAddress),
    queryFn: () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  staking: <TData = UserStaking,>({
    client,
    args,
    options
  }: LpStakingStakingQuery<TData>): UseQueryOptions<UserStaking, Error, TData> => ({
    queryKey: lpStakingQueryKeys.staking(client?.contractAddress, args),
    queryFn: () => client ? client.staking({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  unbonded: <TData = ArrayOfUnbondedItem,>({
    client,
    args,
    options
  }: LpStakingUnbondedQuery<TData>): UseQueryOptions<ArrayOfUnbondedItem, Error, TData> => ({
    queryKey: lpStakingQueryKeys.unbonded(client?.contractAddress, args),
    queryFn: () => client ? client.unbonded({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  reward: <TData = ArrayOfRewardAmount,>({
    client,
    args,
    options
  }: LpStakingRewardQuery<TData>): UseQueryOptions<ArrayOfRewardAmount, Error, TData> => ({
    queryKey: lpStakingQueryKeys.reward(client?.contractAddress, args),
    queryFn: () => client ? client.reward({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardWeights: <TData = ArrayOfRewardWeight,>({
    client,
    options
  }: LpStakingRewardWeightsQuery<TData>): UseQueryOptions<ArrayOfRewardWeight, Error, TData> => ({
    queryKey: lpStakingQueryKeys.rewardWeights(client?.contractAddress),
    queryFn: () => client ? client.rewardWeights() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  userRewardWeights: <TData = ArrayOfRewardWeight,>({
    client,
    args,
    options
  }: LpStakingUserRewardWeightsQuery<TData>): UseQueryOptions<ArrayOfRewardWeight, Error, TData> => ({
    queryKey: lpStakingQueryKeys.userRewardWeights(client?.contractAddress, args),
    queryFn: () => client ? client.userRewardWeights({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  blacklist: <TData = ArrayOfString,>({
    client,
    options
  }: LpStakingBlacklistQuery<TData>): UseQueryOptions<ArrayOfString, Error, TData> => ({
    queryKey: lpStakingQueryKeys.blacklist(client?.contractAddress),
    queryFn: () => client ? client.blacklist() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isAllowed: <TData = Boolean,>({
    client,
    args,
    options
  }: LpStakingIsAllowedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: lpStakingQueryKeys.isAllowed(client?.contractAddress, args),
    queryFn: () => client ? client.isAllowed({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardSchedule: <TData = ArrayOfTupleOfTupleOfUint64AndUint64AndReward,>({
    client,
    args,
    options
  }: LpStakingRewardScheduleQuery<TData>): UseQueryOptions<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, Error, TData> => ({
    queryKey: lpStakingQueryKeys.rewardSchedule(client?.contractAddress, args),
    queryFn: () => client ? client.rewardSchedule({
      from: args.from
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface LpStakingReactQuery<TResponse, TData = TResponse> {
  client: LpStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface LpStakingRewardScheduleQuery<TData> extends LpStakingReactQuery<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, TData> {
  args: {
    from?: number;
  };
}
export function useLpStakingRewardScheduleQuery<TData = ArrayOfTupleOfTupleOfUint64AndUint64AndReward>({
  client,
  args,
  options
}: LpStakingRewardScheduleQuery<TData>) {
  return useQuery<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, Error, TData>(lpStakingQueryKeys.rewardSchedule(client?.contractAddress, args), () => client ? client.rewardSchedule({
    from: args.from
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingIsAllowedQuery<TData> extends LpStakingReactQuery<Boolean, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingIsAllowedQuery<TData = Boolean>({
  client,
  args,
  options
}: LpStakingIsAllowedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(lpStakingQueryKeys.isAllowed(client?.contractAddress, args), () => client ? client.isAllowed({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingBlacklistQuery<TData> extends LpStakingReactQuery<ArrayOfString, TData> {}
export function useLpStakingBlacklistQuery<TData = ArrayOfString>({
  client,
  options
}: LpStakingBlacklistQuery<TData>) {
  return useQuery<ArrayOfString, Error, TData>(lpStakingQueryKeys.blacklist(client?.contractAddress), () => client ? client.blacklist() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingUserRewardWeightsQuery<TData> extends LpStakingReactQuery<ArrayOfRewardWeight, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingUserRewardWeightsQuery<TData = ArrayOfRewardWeight>({
  client,
  args,
  options
}: LpStakingUserRewardWeightsQuery<TData>) {
  return useQuery<ArrayOfRewardWeight, Error, TData>(lpStakingQueryKeys.userRewardWeights(client?.contractAddress, args), () => client ? client.userRewardWeights({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingRewardWeightsQuery<TData> extends LpStakingReactQuery<ArrayOfRewardWeight, TData> {}
export function useLpStakingRewardWeightsQuery<TData = ArrayOfRewardWeight>({
  client,
  options
}: LpStakingRewardWeightsQuery<TData>) {
  return useQuery<ArrayOfRewardWeight, Error, TData>(lpStakingQueryKeys.rewardWeights(client?.contractAddress), () => client ? client.rewardWeights() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingRewardQuery<TData> extends LpStakingReactQuery<ArrayOfRewardAmount, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingRewardQuery<TData = ArrayOfRewardAmount>({
  client,
  args,
  options
}: LpStakingRewardQuery<TData>) {
  return useQuery<ArrayOfRewardAmount, Error, TData>(lpStakingQueryKeys.reward(client?.contractAddress, args), () => client ? client.reward({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingUnbondedQuery<TData> extends LpStakingReactQuery<ArrayOfUnbondedItem, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingUnbondedQuery<TData = ArrayOfUnbondedItem>({
  client,
  args,
  options
}: LpStakingUnbondedQuery<TData>) {
  return useQuery<ArrayOfUnbondedItem, Error, TData>(lpStakingQueryKeys.unbonded(client?.contractAddress, args), () => client ? client.unbonded({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingStakingQuery<TData> extends LpStakingReactQuery<UserStaking, TData> {
  args: {
    user: string;
  };
}
export function useLpStakingStakingQuery<TData = UserStaking>({
  client,
  args,
  options
}: LpStakingStakingQuery<TData>) {
  return useQuery<UserStaking, Error, TData>(lpStakingQueryKeys.staking(client?.contractAddress, args), () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingTotalStakingQuery<TData> extends LpStakingReactQuery<Uint128, TData> {}
export function useLpStakingTotalStakingQuery<TData = Uint128>({
  client,
  options
}: LpStakingTotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(lpStakingQueryKeys.totalStaking(client?.contractAddress), () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingOwnerQuery<TData> extends LpStakingReactQuery<Addr, TData> {}
export function useLpStakingOwnerQuery<TData = Addr>({
  client,
  options
}: LpStakingOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(lpStakingQueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingRewardDistributionQuery<TData> extends LpStakingReactQuery<Reward, TData> {}
export function useLpStakingRewardDistributionQuery<TData = Reward>({
  client,
  options
}: LpStakingRewardDistributionQuery<TData>) {
  return useQuery<Reward, Error, TData>(lpStakingQueryKeys.rewardDistribution(client?.contractAddress), () => client ? client.rewardDistribution() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingConfigQuery<TData> extends LpStakingReactQuery<Config, TData> {}
export function useLpStakingConfigQuery<TData = Config>({
  client,
  options
}: LpStakingConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(lpStakingQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface LpStakingRemoveFromBlacklistMutation {
  client: LpStakingClient;
  msg: {
    user: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingRemoveFromBlacklistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingRemoveFromBlacklistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingRemoveFromBlacklistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeFromBlacklist(msg, fee, memo, funds), options);
}
export interface LpStakingBlockUsersMutation {
  client: LpStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingBlockUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingBlockUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingBlockUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.blockUsers(msg, fee, memo, funds), options);
}
export interface LpStakingAllowUsersMutation {
  client: LpStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingAllowUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingAllowUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingAllowUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allowUsers(msg, fee, memo, funds), options);
}
export interface LpStakingClaimBlacklistRewardsMutation {
  client: LpStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingClaimBlacklistRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingClaimBlacklistRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingClaimBlacklistRewardsMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimBlacklistRewards(fee, memo, funds), options);
}
export interface LpStakingAddRewardsMutation {
  client: LpStakingClient;
  msg: {
    beclip: Uint128;
    duration?: number;
    eclip: Uint128;
    from?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingAddRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingAddRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingAddRewardsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addRewards(msg, fee, memo, funds), options);
}
export interface LpStakingWithdrawMutation {
  client: LpStakingClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface LpStakingUnbondMutation {
  client: LpStakingClient;
  msg: {
    amount?: Uint128;
    period: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUnbondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(msg, fee, memo, funds), options);
}
export interface LpStakingStakeMutation {
  client: LpStakingClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(msg, fee, memo, funds), options);
}
export interface LpStakingUnstakeMutation {
  client: LpStakingClient;
  msg: {
    amount: Uint128;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface LpStakingCallbackMutation {
  client: LpStakingClient;
  msg: CallbackMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingCallbackMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingCallbackMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingCallbackMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.callback(msg, fee, memo, funds), options);
}
export interface LpStakingClaimMutation {
  client: LpStakingClient;
  msg: {
    assets?: AssetInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}
export interface LpStakingUpdateRewardDistributionMutation {
  client: LpStakingClient;
  msg: {
    distribution: RewardDistribution;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUpdateRewardDistributionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUpdateRewardDistributionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUpdateRewardDistributionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateRewardDistribution(msg, fee, memo, funds), options);
}
export interface LpStakingUpdateConfigMutation {
  client: LpStakingClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface LpStakingClaimOwnershipMutation {
  client: LpStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingClaimOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingClaimOwnershipMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimOwnership(fee, memo, funds), options);
}
export interface LpStakingDropOwnershipProposalMutation {
  client: LpStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingDropOwnershipProposalMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingDropOwnershipProposalMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.dropOwnershipProposal(fee, memo, funds), options);
}
export interface LpStakingProposeNewOwnerMutation {
  client: LpStakingClient;
  msg: {
    expiresIn: number;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useLpStakingProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, LpStakingProposeNewOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, LpStakingProposeNewOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposeNewOwner(msg, fee, memo, funds), options);
}