/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, TimeLockConfig, ExecuteMsg, AssetInfo, Addr, CallbackMsg, Uint128, UpdateConfigMsg, QueryMsg, ArrayOfString, UserReward, Config, ArrayOfTupleOfUint64AndUint128, Boolean, ArrayOfTupleOfUint64Anduint64AndUserReward, ArrayOfTupleOfTupleOfUint64Anduint64AndReward, Reward, ArrayOfUserStaking, UserStaking, UserStakingByDuration, ArrayOfStakingWithDuration, StakingWithDuration, ArrayOfUnbondedItem, UnbondedItem } from "./SingleSidedStaking.types";
import { SingleSidedStakingQueryClient, SingleSidedStakingClient } from "./SingleSidedStaking.client";
export const singleSidedStakingQueryKeys = {
  contract: ([{
    contract: "singleSidedStaking"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...singleSidedStakingQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "owner",
    args
  }] as const),
  totalStaking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "total_staking",
    args
  }] as const),
  totalStakingByDuration: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "total_staking_by_duration",
    args
  }] as const),
  staking: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "staking",
    args
  }] as const),
  unbonded: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "unbonded",
    args
  }] as const),
  reward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "reward",
    args
  }] as const),
  calculateReward: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "calculate_reward",
    args
  }] as const),
  calculatePenalty: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "calculate_penalty",
    args
  }] as const),
  isAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "is_allowed",
    args
  }] as const),
  eclipastroRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "eclipastro_rewards",
    args
  }] as const),
  blacklist: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "blacklist",
    args
  }] as const),
  rewardSchedule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "reward_schedule",
    args
  }] as const),
  rewardList: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "reward_list",
    args
  }] as const),
  calculatePenaltyAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...singleSidedStakingQueryKeys.address(contractAddress)[0],
    method: "calculate_penalty_amount",
    args
  }] as const)
};
export const singleSidedStakingQueries = {
  config: <TData = Config,>({
    client,
    options
  }: SingleSidedStakingConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  owner: <TData = Addr,>({
    client,
    options
  }: SingleSidedStakingOwnerQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.owner(client?.contractAddress),
    queryFn: () => client ? client.owner() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStaking: <TData = Uint128,>({
    client,
    options
  }: SingleSidedStakingTotalStakingQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.totalStaking(client?.contractAddress),
    queryFn: () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStakingByDuration: <TData = ArrayOfStakingWithDuration,>({
    client,
    args,
    options
  }: SingleSidedStakingTotalStakingByDurationQuery<TData>): UseQueryOptions<ArrayOfStakingWithDuration, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.totalStakingByDuration(client?.contractAddress, args),
    queryFn: () => client ? client.totalStakingByDuration({
      timestamp: args.timestamp
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  staking: <TData = ArrayOfUserStaking,>({
    client,
    args,
    options
  }: SingleSidedStakingStakingQuery<TData>): UseQueryOptions<ArrayOfUserStaking, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.staking(client?.contractAddress, args),
    queryFn: () => client ? client.staking({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  unbonded: <TData = ArrayOfUnbondedItem,>({
    client,
    args,
    options
  }: SingleSidedStakingUnbondedQuery<TData>): UseQueryOptions<ArrayOfUnbondedItem, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.unbonded(client?.contractAddress, args),
    queryFn: () => client ? client.unbonded({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  reward: <TData = UserReward,>({
    client,
    args,
    options
  }: SingleSidedStakingRewardQuery<TData>): UseQueryOptions<UserReward, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.reward(client?.contractAddress, args),
    queryFn: () => client ? client.reward({
      duration: args.duration,
      lockedAt: args.lockedAt,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  calculateReward: <TData = UserReward,>({
    client,
    args,
    options
  }: SingleSidedStakingCalculateRewardQuery<TData>): UseQueryOptions<UserReward, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.calculateReward(client?.contractAddress, args),
    queryFn: () => client ? client.calculateReward({
      amount: args.amount,
      duration: args.duration,
      from: args.from,
      lockedAt: args.lockedAt,
      to: args.to
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  calculatePenalty: <TData = Uint128,>({
    client,
    args,
    options
  }: SingleSidedStakingCalculatePenaltyQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.calculatePenalty(client?.contractAddress, args),
    queryFn: () => client ? client.calculatePenalty({
      amount: args.amount,
      duration: args.duration,
      lockedAt: args.lockedAt
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isAllowed: <TData = Boolean,>({
    client,
    args,
    options
  }: SingleSidedStakingIsAllowedQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.isAllowed(client?.contractAddress, args),
    queryFn: () => client ? client.isAllowed({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eclipastroRewards: <TData = ArrayOfTupleOfUint64AndUint128,>({
    client,
    options
  }: SingleSidedStakingEclipastroRewardsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndUint128, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.eclipastroRewards(client?.contractAddress),
    queryFn: () => client ? client.eclipastroRewards() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  blacklist: <TData = ArrayOfString,>({
    client,
    options
  }: SingleSidedStakingBlacklistQuery<TData>): UseQueryOptions<ArrayOfString, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.blacklist(client?.contractAddress),
    queryFn: () => client ? client.blacklist() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardSchedule: <TData = ArrayOfTupleOfTupleOfUint64AndUint64AndReward,>({
    client,
    args,
    options
  }: SingleSidedStakingRewardScheduleQuery<TData>): UseQueryOptions<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.rewardSchedule(client?.contractAddress, args),
    queryFn: () => client ? client.rewardSchedule({
      from: args.from
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  rewardList: <TData = ArrayOfTupleOfUint64AndUint64AndUserReward,>({
    client,
    args,
    options
  }: SingleSidedStakingRewardListQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndUint64AndUserReward, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.rewardList(client?.contractAddress, args),
    queryFn: () => client ? client.rewardList({
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  calculatePenaltyAmount: <TData = Uint128,>({
    client,
    args,
    options
  }: SingleSidedStakingCalculatePenaltyAmountQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: singleSidedStakingQueryKeys.calculatePenaltyAmount(client?.contractAddress, args),
    queryFn: () => client ? client.calculatePenaltyAmount({
      amount: args.amount,
      duration: args.duration,
      lockedAt: args.lockedAt
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface SingleSidedStakingReactQuery<TResponse, TData = TResponse> {
  client: SingleSidedStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface SingleSidedStakingCalculatePenaltyAmountQuery<TData> extends SingleSidedStakingReactQuery<Uint128, TData> {
  args: {
    amount: Uint128;
    duration: number;
    lockedAt?: number;
  };
}
export function useSingleSidedStakingCalculatePenaltyAmountQuery<TData = Uint128>({
  client,
  args,
  options
}: SingleSidedStakingCalculatePenaltyAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(singleSidedStakingQueryKeys.calculatePenaltyAmount(client?.contractAddress, args), () => client ? client.calculatePenaltyAmount({
    amount: args.amount,
    duration: args.duration,
    lockedAt: args.lockedAt
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingRewardListQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfTupleOfUint64AndUint64AndUserReward, TData> {
  args: {
    user: string;
  };
}
export function useSingleSidedStakingRewardListQuery<TData = ArrayOfTupleOfUint64AndUint64AndUserReward>({
  client,
  args,
  options
}: SingleSidedStakingRewardListQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndUint64AndUserReward, Error, TData>(singleSidedStakingQueryKeys.rewardList(client?.contractAddress, args), () => client ? client.rewardList({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingRewardScheduleQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, TData> {
  args: {
    from?: number;
  };
}
export function useSingleSidedStakingRewardScheduleQuery<TData = ArrayOfTupleOfTupleOfUint64AndUint64AndReward>({
  client,
  args,
  options
}: SingleSidedStakingRewardScheduleQuery<TData>) {
  return useQuery<ArrayOfTupleOfTupleOfUint64AndUint64AndReward, Error, TData>(singleSidedStakingQueryKeys.rewardSchedule(client?.contractAddress, args), () => client ? client.rewardSchedule({
    from: args.from
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingBlacklistQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfString, TData> {}
export function useSingleSidedStakingBlacklistQuery<TData = ArrayOfString>({
  client,
  options
}: SingleSidedStakingBlacklistQuery<TData>) {
  return useQuery<ArrayOfString, Error, TData>(singleSidedStakingQueryKeys.blacklist(client?.contractAddress), () => client ? client.blacklist() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingEclipastroRewardsQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfTupleOfUint64AndUint128, TData> {}
export function useSingleSidedStakingEclipastroRewardsQuery<TData = ArrayOfTupleOfUint64AndUint128>({
  client,
  options
}: SingleSidedStakingEclipastroRewardsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndUint128, Error, TData>(singleSidedStakingQueryKeys.eclipastroRewards(client?.contractAddress), () => client ? client.eclipastroRewards() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingIsAllowedQuery<TData> extends SingleSidedStakingReactQuery<Boolean, TData> {
  args: {
    user: string;
  };
}
export function useSingleSidedStakingIsAllowedQuery<TData = Boolean>({
  client,
  args,
  options
}: SingleSidedStakingIsAllowedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(singleSidedStakingQueryKeys.isAllowed(client?.contractAddress, args), () => client ? client.isAllowed({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingCalculatePenaltyQuery<TData> extends SingleSidedStakingReactQuery<Uint128, TData> {
  args: {
    amount: Uint128;
    duration: number;
    lockedAt: number;
  };
}
export function useSingleSidedStakingCalculatePenaltyQuery<TData = Uint128>({
  client,
  args,
  options
}: SingleSidedStakingCalculatePenaltyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(singleSidedStakingQueryKeys.calculatePenalty(client?.contractAddress, args), () => client ? client.calculatePenalty({
    amount: args.amount,
    duration: args.duration,
    lockedAt: args.lockedAt
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingCalculateRewardQuery<TData> extends SingleSidedStakingReactQuery<UserReward, TData> {
  args: {
    amount: Uint128;
    duration: number;
    from: number;
    lockedAt?: number;
    to?: number;
  };
}
export function useSingleSidedStakingCalculateRewardQuery<TData = UserReward>({
  client,
  args,
  options
}: SingleSidedStakingCalculateRewardQuery<TData>) {
  return useQuery<UserReward, Error, TData>(singleSidedStakingQueryKeys.calculateReward(client?.contractAddress, args), () => client ? client.calculateReward({
    amount: args.amount,
    duration: args.duration,
    from: args.from,
    lockedAt: args.lockedAt,
    to: args.to
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingRewardQuery<TData> extends SingleSidedStakingReactQuery<UserReward, TData> {
  args: {
    duration: number;
    lockedAt: number;
    user: string;
  };
}
export function useSingleSidedStakingRewardQuery<TData = UserReward>({
  client,
  args,
  options
}: SingleSidedStakingRewardQuery<TData>) {
  return useQuery<UserReward, Error, TData>(singleSidedStakingQueryKeys.reward(client?.contractAddress, args), () => client ? client.reward({
    duration: args.duration,
    lockedAt: args.lockedAt,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingUnbondedQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfUnbondedItem, TData> {
  args: {
    user: string;
  };
}
export function useSingleSidedStakingUnbondedQuery<TData = ArrayOfUnbondedItem>({
  client,
  args,
  options
}: SingleSidedStakingUnbondedQuery<TData>) {
  return useQuery<ArrayOfUnbondedItem, Error, TData>(singleSidedStakingQueryKeys.unbonded(client?.contractAddress, args), () => client ? client.unbonded({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingStakingQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfUserStaking, TData> {
  args: {
    user: string;
  };
}
export function useSingleSidedStakingStakingQuery<TData = ArrayOfUserStaking>({
  client,
  args,
  options
}: SingleSidedStakingStakingQuery<TData>) {
  return useQuery<ArrayOfUserStaking, Error, TData>(singleSidedStakingQueryKeys.staking(client?.contractAddress, args), () => client ? client.staking({
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingTotalStakingByDurationQuery<TData> extends SingleSidedStakingReactQuery<ArrayOfStakingWithDuration, TData> {
  args: {
    timestamp?: number;
  };
}
export function useSingleSidedStakingTotalStakingByDurationQuery<TData = ArrayOfStakingWithDuration>({
  client,
  args,
  options
}: SingleSidedStakingTotalStakingByDurationQuery<TData>) {
  return useQuery<ArrayOfStakingWithDuration, Error, TData>(singleSidedStakingQueryKeys.totalStakingByDuration(client?.contractAddress, args), () => client ? client.totalStakingByDuration({
    timestamp: args.timestamp
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingTotalStakingQuery<TData> extends SingleSidedStakingReactQuery<Uint128, TData> {}
export function useSingleSidedStakingTotalStakingQuery<TData = Uint128>({
  client,
  options
}: SingleSidedStakingTotalStakingQuery<TData>) {
  return useQuery<Uint128, Error, TData>(singleSidedStakingQueryKeys.totalStaking(client?.contractAddress), () => client ? client.totalStaking() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingOwnerQuery<TData> extends SingleSidedStakingReactQuery<Addr, TData> {}
export function useSingleSidedStakingOwnerQuery<TData = Addr>({
  client,
  options
}: SingleSidedStakingOwnerQuery<TData>) {
  return useQuery<Addr, Error, TData>(singleSidedStakingQueryKeys.owner(client?.contractAddress), () => client ? client.owner() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingConfigQuery<TData> extends SingleSidedStakingReactQuery<Config, TData> {}
export function useSingleSidedStakingConfigQuery<TData = Config>({
  client,
  options
}: SingleSidedStakingConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(singleSidedStakingQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SingleSidedStakingClaimBlacklistRewardsMutation {
  client: SingleSidedStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingClaimBlacklistRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingClaimBlacklistRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingClaimBlacklistRewardsMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimBlacklistRewards(fee, memo, funds), options);
}
export interface SingleSidedStakingAddRewardsMutation {
  client: SingleSidedStakingClient;
  msg: {
    beclip: Uint128;
    duration?: number;
    eclip: Uint128;
    from?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingAddRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingAddRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingAddRewardsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addRewards(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingBlockUsersMutation {
  client: SingleSidedStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingBlockUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingBlockUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingBlockUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.blockUsers(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingAllowUsersMutation {
  client: SingleSidedStakingClient;
  msg: {
    users: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingAllowUsersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingAllowUsersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingAllowUsersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allowUsers(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingRestakeMutation {
  client: SingleSidedStakingClient;
  msg: {
    amount?: Uint128;
    fromDuration: number;
    lockedAt?: number;
    recipient?: string;
    toDuration: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingRestakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingRestakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingRestakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.restake(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingWithdrawMutation {
  client: SingleSidedStakingClient;
  msg: {
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingUnbondMutation {
  client: SingleSidedStakingClient;
  msg: {
    duration: number;
    lockedAt: number;
    period: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingUnbondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingUnstakeMutation {
  client: SingleSidedStakingClient;
  msg: {
    amount?: Uint128;
    duration: number;
    lockedAt?: number;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingStakeMutation {
  client: SingleSidedStakingClient;
  msg: {
    duration: number;
    recipient?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingCallbackMutation {
  client: SingleSidedStakingClient;
  msg: CallbackMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingCallbackMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingCallbackMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingCallbackMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.callback(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingClaimAllMutation {
  client: SingleSidedStakingClient;
  msg: {
    assets?: AssetInfo[];
    withFlexible: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingClaimAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingClaimAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingClaimAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimAll(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingClaimMutation {
  client: SingleSidedStakingClient;
  msg: {
    assets?: AssetInfo[];
    duration: number;
    lockedAt?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingUpdateConfigMutation {
  client: SingleSidedStakingClient;
  msg: {
    config: UpdateConfigMsg;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface SingleSidedStakingClaimOwnershipMutation {
  client: SingleSidedStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingClaimOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingClaimOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingClaimOwnershipMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimOwnership(fee, memo, funds), options);
}
export interface SingleSidedStakingDropOwnershipProposalMutation {
  client: SingleSidedStakingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingDropOwnershipProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingDropOwnershipProposalMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingDropOwnershipProposalMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.dropOwnershipProposal(fee, memo, funds), options);
}
export interface SingleSidedStakingProposeNewOwnerMutation {
  client: SingleSidedStakingClient;
  msg: {
    expiresIn: number;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useSingleSidedStakingProposeNewOwnerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, SingleSidedStakingProposeNewOwnerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, SingleSidedStakingProposeNewOwnerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposeNewOwner(msg, fee, memo, funds), options);
}